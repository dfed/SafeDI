// Distributed under the MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import SafeDICore
import XCTest

@testable import SafeDITool

final class SafeDIToolCodeGenerationTests: XCTestCase {
    // MARK: XCTestCase

    override func setUpWithError() throws {
        try super.setUpWithError()

        filesToDelete = [URL]()
    }

    override func tearDownWithError() throws {
        try super.tearDownWithError()

        for fileToDelete in filesToDelete {
            try FileManager.default.removeItem(at: fileToDelete)
        }
    }

    #if !os(Linux) // Linux does not support multiple invokations of the same test.
        override func invokeTest() {
            // Stop test execution on the first failure so we don't get repeated failures per repeated test run.
            continueAfterFailure = false
            // Run each test five times to ensure ordering is consistent.
            for _ in 0..<5 {
                super.invokeTest()
            }
        }
    #endif

    // MARK: Code Generation Tests

    func test_run_successfullyGeneratesOutputFileWhenNoCodeInput() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            // No root @Instantiable-decorated types found, or root types already had a `public init()` method.
            """
        )
    }

    func test_run_doesNotWriteExtensionIfRootAlreadyHasEmptyInitializer() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    let urlSession: URLSession = .shared
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            // No root @Instantiable-decorated types found, or root types already had a `public init()` method.
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootIsClass() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    let urlSession: URLSession = .shared
                }
                """,
                """
                @Instantiable
                public final class RootViewController: UIViewController {
                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootIsActor() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                import class Foundation.URLSession

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    let urlSession: URLSession = .shared
                }
                """,
                """
                @Instantiable
                public actor Root {
                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import class Foundation.URLSession
            #endif

            extension Root {
                public init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootIsStruct() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    let urlSession: URLSession = .shared
                }
                """,
                """
                @Instantiable
                public struct Root {
                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root {
                public init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenMultipleRootsExist() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    let urlSession: URLSession = .shared
                }
                """,
                """
                @Instantiable
                public struct Root1 {
                    @Instantiated
                    let networkService: NetworkService
                }
                """,
                """
                @Instantiable
                public struct Root2 {
                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root1 {
                public init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }

            extension Root2 {
                public init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootHasAnAnyProperty() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated
                    private let userService: any UserService
                }
                """,
                """
                import Foundation

                public protocol UserService {
                    var userName: String? { get set }
                }

                @Instantiable(fulfillingAdditionalTypes: [UserService.self])
                public final class DefaultUserService: UserService {
                    public init() {}

                    public var userName: String?
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root {
                public init() {
                    let userService: any UserService = DefaultUserService()
                    self.init(userService: userService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootHasAnAnyPropertyFulfilledByAnyAdditionalType() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public protocol SomeProtocol<SomeAssociatedType> {
                    associatedtype SomeAssociatedType
                }
                """,
                """
                @Instantiable(fulfillingAdditionalTypes: [(any SomeProtocol<OtherType>).self])
                public final class SomeClass: SomeProtocol {
                    public typealias SomeAssociatedType = OtherType
                }
                """,
                """
                @Instantiable
                public final class SomeInstantiated: Instantiable {
                    @Instantiated
                    private let someClass: any SomeProtocol<OtherType>
                }
                """,
                """
                public final class OtherType {}
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension SomeInstantiated {
                public convenience init() {
                    let someClass: any SomeProtocol<OtherType> = SomeClass()
                    self.init(someClass: someClass)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootHasAnOptionalProperty() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated
                    private let userService: UserService?
                }
                """,
                """
                import Foundation

                public protocol UserService {
                    var userName: String? { get set }
                }

                @Instantiable(fulfillingAdditionalTypes: [UserService.self])
                public final class DefaultUserService: UserService {
                    public init() {}

                    public var userName: String?
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root {
                public init() {
                    let userService: UserService? = DefaultUserService()
                    self.init(userService: userService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootHasMultipleLayers() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ErasedInstantiator<User, UIViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated(fulfilledByType: "LoggedInViewController")
                    let loggedInViewControllerBuilder: ErasedInstantiator<User, UIViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let user: User

                    @Received
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(user: User) -> LoggedInViewController {
                        LoggedInViewController(user: user, networkService: networkService)
                    }
                    let loggedInViewControllerBuilder = ErasedInstantiator<User, UIViewController> {
                        __safeDI_loggedInViewControllerBuilder(user: $0)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizesSingleForwardedPropertyInSubBuilders() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: Instantiator<LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let loggedInViewControllerBuilder: Instantiator<LoggedInViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    @Received
                    let user: User
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let user: User

                    @Received
                    let networkService: NetworkService

                    @Instantiated
                    let userService: UserService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(user: User) -> LoggedInViewController {
                        let userService = UserService(user: user)
                        return LoggedInViewController(user: user, networkService: networkService, userService: userService)
                    }
                    let loggedInViewControllerBuilder = Instantiator<LoggedInViewController> {
                        __safeDI_loggedInViewControllerBuilder(user: $0)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizesSingleEscapingForwardedProperty() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class NetworkService: Instantiable {
                    @Forwarded private let fetchAuthToken: () -> Void
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(networkServiceBuilder: Instantiator<NetworkService>) {
                        self.networkServiceBuilder = networkServiceBuilder
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated let networkServiceBuilder: Instantiator<NetworkService>
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    func __safeDI_networkServiceBuilder(fetchAuthToken: @escaping () -> Void) -> NetworkService {
                        NetworkService(fetchAuthToken: fetchAuthToken)
                    }
                    let networkServiceBuilder = Instantiator<NetworkService> {
                        __safeDI_networkServiceBuilder(fetchAuthToken: $0)
                    }
                    self.init(networkServiceBuilder: networkServiceBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizeMultipleForwardedPropertiesInSubBuilders() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {
                    public var id: String
                    public var name: String
                }
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ErasedInstantiator<(userID: String, userName: String), UIViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated(fulfilledByType: "LoggedInViewController")
                    let loggedInViewControllerBuilder: ErasedInstantiator<(userID: String, userName: String), UIViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate((userID: user.id, userName: user.name))
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    @Received
                    let userName: String

                    @Received
                    let userID: String
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let userName: String

                    @Forwarded
                    private let userID: String

                    @Received
                    let networkService: NetworkService

                    @Instantiated
                    let userService: UserService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(userID: String, userName: String) -> LoggedInViewController {
                        let userService = UserService(userName: userName, userID: userID)
                        return LoggedInViewController(userName: userName, userID: userID, networkService: networkService, userService: userService)
                    }
                    let loggedInViewControllerBuilder = ErasedInstantiator<(userID: String, userName: String), UIViewController> {
                        __safeDI_loggedInViewControllerBuilder(userID: $0.userID, userName: $0.userName)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizeMultipleForwardedPropertiesAndDependencyInversionInSubBuilders() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {
                    public var id: String
                    public var name: String
                }
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ErasedInstantiator<LoggedInViewController.ForwardedProperties, UIViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated(fulfilledByType: "LoggedInViewController")
                    let loggedInViewControllerBuilder: ErasedInstantiator<LoggedInViewController.ForwardedProperties, UIViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate((userID: user.id, userName: user.name))
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    @Received
                    let userName: String

                    @Received
                    let userID: String
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let userName: String

                    @Forwarded
                    private let userID: String

                    @Received
                    let networkService: NetworkService

                    @Instantiated
                    let userService: UserService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(userID: String, userName: String) -> LoggedInViewController {
                        let userService = UserService(userName: userName, userID: userID)
                        return LoggedInViewController(userName: userName, userID: userID, networkService: networkService, userService: userService)
                    }
                    let loggedInViewControllerBuilder = ErasedInstantiator<LoggedInViewController.ForwardedProperties, UIViewController> {
                        __safeDI_loggedInViewControllerBuilder(userID: $0.userID, userName: $0.userName)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizesDependencyInversionOfExistentialTypeInSubBuilder() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                import SwiftUI

                @Instantiable
                public struct RootView: View {
                    public var view: some View {
                        splashScreenView
                    }

                    @Instantiated(fulfilledByType: "SplashScreenView", erasedToConcreteExistential: true)
                    private let splashScreenView: AnyView
                }
                """,
                """
                import SwiftUI

                @Instantiable
                public struct SplashScreenView: View {}
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(SwiftUI)
            import SwiftUI
            #endif

            extension RootView {
                public init() {
                    let splashScreenView = AnyView(SplashScreenView())
                    self.init(splashScreenView: splashScreenView)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizesLazyDependencyInversionOfExistentialTypeInSubBuilder() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                import SwiftUI

                @Instantiable
                public struct RootView: View {
                    public var view: some View {
                        splashScreenViewBuilder.instantaite()
                    }

                    @Instantiated(fulfilledByType: "SplashScreenView", erasedToConcreteExistential: true)
                    private let splashScreenViewBuilder: ErasedInstantiator<(), AnyView>
                }
                """,
                """
                import SwiftUI

                @Instantiable
                public struct SplashScreenView: View {}
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(SwiftUI)
            import SwiftUI
            #endif

            extension RootView {
                public init() {
                    func __safeDI_splashScreenViewBuilder() -> SplashScreenView {
                        SplashScreenView()
                    }
                    let splashScreenViewBuilder = ErasedInstantiator<(), AnyView> {
                        AnyView(__safeDI_splashScreenViewBuilder())
                    }
                    self.init(splashScreenViewBuilder: splashScreenViewBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizePropertiesNotDirectlyProvidedByParent() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: Instantiator<LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: Instantiator<LoggedInViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    @Received
                    let user: User

                    @Received
                    private let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let user: User

                    @Instantiated
                    let userService: UserService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(user: User) -> LoggedInViewController {
                        let userService = UserService(user: user, networkService: networkService)
                        return LoggedInViewController(user: user, userService: userService)
                    }
                    let loggedInViewControllerBuilder = Instantiator<LoggedInViewController> {
                        __safeDI_loggedInViewControllerBuilder(user: $0)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleLayersOfInstantiators() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: Instantiator<LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: Instantiator<LoggedInViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    @Received
                    let user: User

                    @Received
                    private let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let user: User

                    @Instantiated
                    let userServiceInstantiator: Instantiator<UserService>
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(user: User) -> LoggedInViewController {
                        func __safeDI_userServiceInstantiator() -> UserService {
                            UserService(user: user, networkService: networkService)
                        }
                        let userServiceInstantiator = Instantiator<UserService>(__safeDI_userServiceInstantiator)
                        return LoggedInViewController(user: user, userServiceInstantiator: userServiceInstantiator)
                    }
                    let loggedInViewControllerBuilder = Instantiator<LoggedInViewController> {
                        __safeDI_loggedInViewControllerBuilder(user: $0)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertyWithMissingInstantiableInitializer() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable()
                public final class Child {
                    // This Child is incorrectly configured! It is missing the required initializer.

                    @Instantiated
                    let grandchild: Grandchild

                    let uninitializedProperty: Int
                }
                """,
                """
                @Instantiable()
                public final class Grandchild {}
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child: Child = {
                        let grandchild = Grandchild()
                        return Child(/* @Instantiable type is incorrectly configured. Fix errors from @Instantiable macro to fix this error. */)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertyWithInitializerWithDefaultArgumentForNonInjectedProperty() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable()
                public final class Child {
                    public init(grandchild: Grandchild, nonInjectedProperty: Int = 5) {
                        self.grandchild = grandchild
                        self.nonInjectedProperty = nonInjectedProperty
                    }

                    @Instantiated
                    let grandchild: Grandchild

                    let nonInjectedProperty: Int
                }
                """,
                """
                @Instantiable()
                public final class Grandchild {}
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child: Child = {
                        let grandchild = Grandchild()
                        return Child(grandchild: grandchild)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertyWithNotPublicInstantiableInitializer() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable()
                final class Child {
                    @Instantiated
                    let grandchild: Grandchild
                }
                """,
                """
                @Instantiable()
                public final class Grandchild {}
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child: Child = {
                        let grandchild = Grandchild()
                        return Child(grandchild: grandchild)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesNonPublicProperty() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable()
                final class Child {
                    @Instantiated
                    let grandchild: Grandchild
                }
                """,
                """
                @Instantiable()
                public final class Grandchild {}
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child: Child = {
                        let grandchild = Grandchild()
                        return Child(grandchild: grandchild)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleTreesThatReceiveTheSameProperty() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    @Instantiated
                    let childA: ChildA
                    @Instantiated
                    let childB: ChildB
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class ChildA {
                    @Instantiated
                    let grandchildAA: GrandchildAA
                    @Instantiated
                    let grandchildAB: GrandchildAB
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAA {
                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAB {
                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class ChildB {
                    @Instantiated
                    let grandchildBA: GrandchildBA
                    @Instantiated
                    let grandchildBB: GrandchildBB
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBA {
                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBB {
                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GreatGrandchild {}
                """,

            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let greatGrandchild = GreatGrandchild()
                    let childA: ChildA = {
                        let grandchildAA = GrandchildAA(greatGrandchild: greatGrandchild)
                        let grandchildAB = GrandchildAB(greatGrandchild: greatGrandchild)
                        return ChildA(grandchildAA: grandchildAA, grandchildAB: grandchildAB)
                    }()
                    let childB: ChildB = {
                        let grandchildBA = GrandchildBA(greatGrandchild: greatGrandchild)
                        let grandchildBB = GrandchildBB(greatGrandchild: greatGrandchild)
                        return ChildB(grandchildBA: grandchildBA, grandchildBB: grandchildBB)
                    }()
                    self.init(childA: childA, childB: childB, greatGrandchild: greatGrandchild)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleTreesThatInstantiateTheSamePropertyInMiddleLevel() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    @Instantiated
                    let childA: ChildA
                    @Instantiated
                    let childB: ChildB
                }
                """,
                """
                @Instantiable()
                public final class ChildA {
                    @Instantiated
                    let grandchildAA: GrandchildAA
                    @Instantiated
                    let grandchildAB: GrandchildAB
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAA {
                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAB {
                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class ChildB {
                    @Instantiated
                    let grandchildBA: GrandchildBA
                    @Instantiated
                    let grandchildBB: GrandchildBB
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBA {
                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBB {
                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GreatGrandchild {}
                """,

            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let childA: ChildA = {
                        let greatGrandchild = GreatGrandchild()
                        let grandchildAA = GrandchildAA(greatGrandchild: greatGrandchild)
                        let grandchildAB = GrandchildAB(greatGrandchild: greatGrandchild)
                        return ChildA(grandchildAA: grandchildAA, grandchildAB: grandchildAB, greatGrandchild: greatGrandchild)
                    }()
                    let childB: ChildB = {
                        let greatGrandchild = GreatGrandchild()
                        let grandchildBA = GrandchildBA(greatGrandchild: greatGrandchild)
                        let grandchildBB = GrandchildBB(greatGrandchild: greatGrandchild)
                        return ChildB(grandchildBA: grandchildBA, grandchildBB: grandchildBB, greatGrandchild: greatGrandchild)
                    }()
                    self.init(childA: childA, childB: childB)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithSingleTreeThatInstantiatesTheSamePropertyAtMultipleLevels() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class Root {
                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable
                public final class Recreated {}
                """,
                """
                @Instantiable
                public final class Child {
                    @Instantiated
                    let grandchild: Grandchild
                    @Instantiated
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class Grandchild {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                    @Instantiated
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class GreatGrandchild {
                    @Received
                    let recreated: Recreated
                }
                """,

            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child: Child = {
                        let grandchild: Grandchild = {
                            let recreated = Recreated()
                            let greatGrandchild = GreatGrandchild(recreated: recreated)
                            return Grandchild(greatGrandchild: greatGrandchild, recreated: recreated)
                        }()
                        let recreated = Recreated()
                        return Child(grandchild: grandchild, recreated: recreated)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithSingleTreeThatInstantiatesAReceivedPropertyBelowWhereItIsReceived() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class Root {
                    @Instantiated
                    let child: Child
                    @Instantiated
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class Recreated {}
                """,
                """
                @Instantiable
                public final class Child {
                    @Instantiated
                    let grandchild: Grandchild
                    @Received
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class Grandchild {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable
                public final class GreatGrandchild {
                    @Instantiated
                    let recreated: Recreated
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let recreated = Recreated()
                    let child: Child = {
                        let grandchild: Grandchild = {
                            let greatGrandchild: GreatGrandchild = {
                                let recreated = Recreated()
                                return GreatGrandchild(recreated: recreated)
                            }()
                            return Grandchild(greatGrandchild: greatGrandchild)
                        }()
                        return Child(grandchild: grandchild, recreated: recreated)
                    }()
                    self.init(child: child, recreated: recreated)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithSingleTreeThatInstantiatesAReceivedPropertyMultipleLevelsBelowWhereItIsFirstReceived() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class Root {
                    @Instantiated
                    let child: Child
                    @Instantiated
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class Recreated {}
                """,
                """
                @Instantiable
                public final class Child {
                    @Instantiated
                    let grandchild: Grandchild
                }
                """,
                """
                @Instantiable
                public final class Grandchild {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable
                public final class GreatGrandchild {
                    @Instantiated
                    let greatGreatGrandchild: GreatGreatGrandchild
                    @Received
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class GreatGreatGrandchild {
                    @Instantiated
                    let recreated: Recreated
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let recreated = Recreated()
                    let child: Child = {
                        let grandchild: Grandchild = {
                            let greatGrandchild: GreatGrandchild = {
                                let greatGreatGrandchild: GreatGreatGrandchild = {
                                    let recreated = Recreated()
                                    return GreatGreatGrandchild(recreated: recreated)
                                }()
                                return GreatGrandchild(greatGreatGrandchild: greatGreatGrandchild, recreated: recreated)
                            }()
                            return Grandchild(greatGrandchild: greatGrandchild)
                        }()
                        return Child(grandchild: grandchild)
                    }()
                    self.init(child: child, recreated: recreated)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithSingleTreeThatInstantiatesAPropertyReceivedInOneChildBranchMultipleLevelsBelowWhereItIsFirstReceived() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class Root {
                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable
                public final class Recreated: Sendable {}
                """,
                """
                @Instantiable
                public final class Child {
                    @Instantiated
                    let grandchild: Grandchild
                    @Instantiated
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class Grandchild {
                    @Instantiated
                    let greatGrandchildA: GreatGrandchildA
                    @Instantiated
                    let greatGrandchildB: GreatGrandchildB
                }
                """,
                """
                @Instantiable
                public final class GreatGrandchildA {
                    @Instantiated
                    let greatGreatGrandchild: GreatGreatGrandchild
                    @Received
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class GreatGrandchildB {
                    @Instantiated
                    let greatGreatGrandchild: GreatGreatGrandchild
                }
                """,
                """
                @Instantiable
                public final class GreatGreatGrandchild {
                    @Instantiated
                    let recreated: Recreated
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child: Child = {
                        let recreated = Recreated()
                        let grandchild: Grandchild = {
                            let greatGrandchildA: GreatGrandchildA = {
                                let greatGreatGrandchild: GreatGreatGrandchild = {
                                    let recreated = Recreated()
                                    return GreatGreatGrandchild(recreated: recreated)
                                }()
                                return GreatGrandchildA(greatGreatGrandchild: greatGreatGrandchild, recreated: recreated)
                            }()
                            let greatGrandchildB: GreatGrandchildB = {
                                let greatGreatGrandchild: GreatGreatGrandchild = {
                                    let recreated = Recreated()
                                    return GreatGreatGrandchild(recreated: recreated)
                                }()
                                return GreatGrandchildB(greatGreatGrandchild: greatGreatGrandchild)
                            }()
                            return Grandchild(greatGrandchildA: greatGrandchildA, greatGrandchildB: greatGrandchildB)
                        }()
                        return Child(grandchild: grandchild, recreated: recreated)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesAPropertyForwardedByAChild_doesNotRequirePuttingInstantiatedPropertyBeforeErasedInstantiator() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class Root {
                    @Instantiated(fulfilledByType: "ChildA")
                    let childABuilder: SendableErasedInstantiator<Recreated, ChildAProtocol>
                    @Instantiated
                    let childB: ChildB
                    @Instantiated
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class Recreated {}
                """,
                """
                public protocol ChildAProtocol: Sendable {}
                @Instantiable
                public final class ChildA: ChildAProtocol {
                    @Instantiated
                    let grandchildA: GrandchildA
                    @Instantiated
                    let grandchildB: GrandchildB
                    @Forwarded
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class ChildB {
                    @Instantiated
                    let grandchildA: GrandchildA
                    @Instantiated
                    let grandchildB: GrandchildB
                    @Received
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class GrandchildA {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                    @Instantiated
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class GrandchildB {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable
                public final class GreatGrandchild {
                    @Received
                    let recreated: Recreated
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    @Sendable func __safeDI_childABuilder(recreated: Recreated) -> ChildA {
                        let grandchildA: GrandchildA = {
                            let recreated = Recreated()
                            let greatGrandchild = GreatGrandchild(recreated: recreated)
                            return GrandchildA(greatGrandchild: greatGrandchild, recreated: recreated)
                        }()
                        let grandchildB: GrandchildB = {
                            let greatGrandchild = GreatGrandchild(recreated: recreated)
                            return GrandchildB(greatGrandchild: greatGrandchild)
                        }()
                        return ChildA(grandchildA: grandchildA, grandchildB: grandchildB, recreated: recreated)
                    }
                    let childABuilder = SendableErasedInstantiator<Recreated, ChildAProtocol> {
                        __safeDI_childABuilder(recreated: $0)
                    }
                    let recreated = Recreated()
                    let childB: ChildB = {
                        let grandchildA: GrandchildA = {
                            let recreated = Recreated()
                            let greatGrandchild = GreatGrandchild(recreated: recreated)
                            return GrandchildA(greatGrandchild: greatGrandchild, recreated: recreated)
                        }()
                        let grandchildB: GrandchildB = {
                            let greatGrandchild = GreatGrandchild(recreated: recreated)
                            return GrandchildB(greatGrandchild: greatGrandchild)
                        }()
                        return ChildB(grandchildA: grandchildA, grandchildB: grandchildB, recreated: recreated)
                    }()
                    self.init(childABuilder: childABuilder, childB: childB, recreated: recreated)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleTreesThatInstantiateTheSamePropertyMultipleLayersDeep() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    @Instantiated
                    let childA: ChildA
                    @Instantiated
                    let childB: ChildB
                }
                """,
                """
                @Instantiable()
                public final class ChildA {
                    @Instantiated
                    let grandchildAA: GrandchildAA
                    @Instantiated
                    let grandchildAB: GrandchildAB
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAA {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAB {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class ChildB {
                    @Instantiated
                    let grandchildBA: GrandchildBA
                    @Instantiated
                    let grandchildBB: GrandchildBB
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBA {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBB {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GreatGrandchild {}
                """,

            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let childA: ChildA = {
                        let grandchildAA: GrandchildAA = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildAA(greatGrandchild: greatGrandchild)
                        }()
                        let grandchildAB: GrandchildAB = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildAB(greatGrandchild: greatGrandchild)
                        }()
                        return ChildA(grandchildAA: grandchildAA, grandchildAB: grandchildAB)
                    }()
                    let childB: ChildB = {
                        let grandchildBA: GrandchildBA = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildBA(greatGrandchild: greatGrandchild)
                        }()
                        let grandchildBB: GrandchildBB = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildBB(greatGrandchild: greatGrandchild)
                        }()
                        return ChildB(grandchildBA: grandchildBA, grandchildBB: grandchildBB)
                    }()
                    self.init(childA: childA, childB: childB)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesInstantiablePropertyWithNoArguments() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    @Instantiated
                    let child: Child
                    @Instantiated
                    let keyValueStore: KeyValueStore
                }
                """,
                """
                @Instantiable()
                public final class Child {
                    @Received
                    let keyValueStore: KeyValueStore
                }
                """,
                """
                import Foundation

                public protocol KeyValueStore {}

                @Instantiable(fulfillingAdditionalTypes: [KeyValueStore.self])
                extension UserDefaults: @retroactive Instantiable, @retroactive KeyValueStore {
                    public static func instantiate() -> UserDefaults {
                        getShared()
                    }

                    private func getShared() -> UserDefaults { .standard }

                    final class NestedClass {}
                    actor NestedActor {}
                    struct NestedStruct {
                        public func instantiate() -> NestedStruct { init() }
                    }
                    typealias NestedTypealias = ()
                    private var sessionType: String { "foreground" }
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root {
                public convenience init() {
                    let keyValueStore: KeyValueStore = UserDefaults.instantiate()
                    let child = Child(keyValueStore: keyValueStore)
                    self.init(child: child, keyValueStore: keyValueStore)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesInstantiablePropertyWithArguments() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {
                    let username: String
                }
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User(username: username)
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ErasedInstantiator<User, UIViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated(fulfilledByType: "LoggedInViewController")
                    let loggedInViewControllerBuilder: ErasedInstantiator<User, UIViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let user: User

                    @Received
                    let networkService: NetworkService

                    @Instantiated
                    let keyValueStore: KeyValueStore
                }
                """,
                """
                import Foundation

                public protocol KeyValueStore {}

                @Instantiable(fulfillingAdditionalTypes: [KeyValueStore.self])
                extension UserDefaults: Instantiable {
                    public static func instantiate(user: User) -> UserDefaults {
                        UserDefaults(user: user)
                    }

                    convenience
                    init(user: User) {
                        self.init(suiteName: user.username)
                    }
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif
            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(user: User) -> LoggedInViewController {
                        let keyValueStore: KeyValueStore = UserDefaults.instantiate(user: user)
                        return LoggedInViewController(user: user, networkService: networkService, keyValueStore: keyValueStore)
                    }
                    let loggedInViewControllerBuilder = ErasedInstantiator<User, UIViewController> {
                        __safeDI_loggedInViewControllerBuilder(user: $0)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleTreesThatInstantiateTheSamePropertyAcrossMultipleModules() async throws {
        let greatGrandchildModuleOutput = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class GreatGrandchild: Sendable {}
                """,
            ],
            buildDependencyTreeOutput: false,
            filesToDelete: &filesToDelete
        )

        let grandchildModuleOutput = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                import GreatGrandchildModule

                @Instantiable()
                public final class GrandchildAA {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                import GreatGrandchildModule

                @Instantiable()
                public final class GrandchildAB {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                import GreatGrandchildModule

                @Instantiable()
                public final class GrandchildBA {
                    @Instantiated
                    var greatGrandchildInstantiator: SendableInstantiator<GreatGrandchild>
                }
                """,
                """
                import GreatGrandchildModule

                @Instantiable()
                public final class GrandchildBB {
                    @Instantiated
                    greatGrandchildInstantiator: SendableInstantiator<GreatGrandchild>
                }
                """,
            ],
            dependentModuleOutputPaths: [greatGrandchildModuleOutput.moduleInfoOutputPath],
            buildDependencyTreeOutput: false,
            filesToDelete: &filesToDelete
        )

        let childModuleOutput = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                import class GrandchildModule.GrandchildAA
                import class GrandchildModule.GrandchildAB

                @MainActor
                @Instantiable
                public final class ChildA {
                    @Instantiated
                    let grandchildAA: GrandchildAA
                    @Instantiated
                    let grandchildAB: GrandchildAB
                }
                """,
                """
                @preconcurrency import GrandchildModule

                @Instantiable()
                public final class ChildB {
                    @Instantiated
                    let grandchildBA: GrandchildBA
                    @Instantiated
                    let grandchildBB: GrandchildBB
                }
                """,
            ],
            dependentModuleOutputPaths: [
                greatGrandchildModuleOutput.moduleInfoOutputPath,
                grandchildModuleOutput.moduleInfoOutputPath,
            ],
            buildDependencyTreeOutput: false,
            filesToDelete: &filesToDelete
        )

        let topLevelModuleOutput = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                import ChildModule

                @MainActor
                @Instantiable
                public final class Root {
                    @Instantiated
                    let childA: ChildA
                    @Instantiated
                    let childB: ChildB
                }
                """,
            ],
            dependentModuleOutputPaths: [
                greatGrandchildModuleOutput.moduleInfoOutputPath,
                grandchildModuleOutput.moduleInfoOutputPath,
                childModuleOutput.moduleInfoOutputPath,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(topLevelModuleOutput.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(ChildModule)
            import ChildModule
            #endif
            #if canImport(GrandchildModule)
            import GrandchildModule
            #endif
            #if canImport(GreatGrandchildModule)
            import GreatGrandchildModule
            #endif

            extension Root {
                public convenience init() {
                    let childA: ChildA = {
                        let grandchildAA: GrandchildAA = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildAA(greatGrandchild: greatGrandchild)
                        }()
                        let grandchildAB: GrandchildAB = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildAB(greatGrandchild: greatGrandchild)
                        }()
                        return ChildA(grandchildAA: grandchildAA, grandchildAB: grandchildAB)
                    }()
                    let childB: ChildB = {
                        let grandchildBA: GrandchildBA = {
                            @Sendable func __safeDI_greatGrandchildInstantiator() -> GreatGrandchild {
                                GreatGrandchild()
                            }
                            let greatGrandchildInstantiator = SendableInstantiator<GreatGrandchild>(__safeDI_greatGrandchildInstantiator)
                            return GrandchildBA(greatGrandchildInstantiator: greatGrandchildInstantiator)
                        }()
                        let grandchildBB: GrandchildBB = {
                            @Sendable func __safeDI_greatGrandchildInstantiator() -> GreatGrandchild {
                                GreatGrandchild()
                            }
                            let greatGrandchildInstantiator = SendableInstantiator<GreatGrandchild>(__safeDI_greatGrandchildInstantiator)
                            return GrandchildBB(greatGrandchildInstantiator: greatGrandchildInstantiator)
                        }()
                        return ChildB(grandchildBA: grandchildBA, grandchildBB: grandchildBB)
                    }()
                    self.init(childA: childA, childB: childB)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootHasReceivedAliasOfInstantiable() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated
                    private let defaultUserService: DefaultUserService

                    @Received(fulfilledByDependencyNamed: "defaultUserService", ofType: DefaultUserService.self)
                    private let userService: any UserService
                }
                """,
                """
                import Foundation

                public protocol UserService {
                    var userName: String? { get set }
                }

                @Instantiable(fulfillingAdditionalTypes: [UserService.self])
                public final class DefaultUserService: UserService {
                    public init() {}

                    public var userName: String?
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root {
                public init() {
                    let defaultUserService = DefaultUserService()
                    let userService: any UserService = defaultUserService
                    self.init(defaultUserService: defaultUserService, userService: userService)
                }
            }
            """
        )
    }

    func test_run_successfullyGeneratesOutputFileWhenNoRootFound() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct NotRoot {
                    @Instantiated
                    private let defaultUserService: DefaultUserService

                    // This received property's alias is improperly configured, meaning that this type is not a root.
                    @Received(fulfilledByDependencyNamed: "userService", ofType: DefaultUserService.self)
                    private let userService: any UserService
                }
                """,
                """
                import Foundation

                public protocol UserService {
                    var userName: String? { get set }
                }

                @Instantiable(fulfillingAdditionalTypes: [UserService.self])
                public final class DefaultUserService: UserService {
                    public init() {}

                    public var userName: String?
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            // No root @Instantiable-decorated types found, or root types already had a `public init()` method.
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenReceivedPropertyIsAliased() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol UserVendor {
                    var user: User { get }
                }

                public protocol UserManager: UserVendor {
                    var user: User { get set }
                }

                public final class DefaultUserManager: UserManager {
                    public init(user: User) {
                        self.user = user
                    }

                    public var user: User
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User(username: username)
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: Instantiator<LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: Instantiator<LoggedInViewController>

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(UserManager(user: user))
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let userManager: UserManager

                    @Instantiated
                    private let profileViewControllerBuilder: Instantiator<ProfileViewController>
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class ProfileViewController: UIViewController {
                    @Received(fulfilledByDependencyNamed: "userManager", ofType: UserManager.self)
                    private let userVendor: UserVendor

                    @Instantiated
                    private let editProfileViewControllerBuilder: Instantiator<EditProfileViewController>
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class EditProfileViewController: UIViewController {
                    @Received
                    private let userVendor: UserVendor
                    @Received
                    private let userManager: UserManager
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(userManager: UserManager) -> LoggedInViewController {
                        func __safeDI_profileViewControllerBuilder() -> ProfileViewController {
                            let userVendor: UserVendor = userManager
                            func __safeDI_editProfileViewControllerBuilder() -> EditProfileViewController {
                                EditProfileViewController(userVendor: userVendor, userManager: userManager)
                            }
                            let editProfileViewControllerBuilder = Instantiator<EditProfileViewController>(__safeDI_editProfileViewControllerBuilder)
                            return ProfileViewController(userVendor: userVendor, editProfileViewControllerBuilder: editProfileViewControllerBuilder)
                        }
                        let profileViewControllerBuilder = Instantiator<ProfileViewController>(__safeDI_profileViewControllerBuilder)
                        return LoggedInViewController(userManager: userManager, profileViewControllerBuilder: profileViewControllerBuilder)
                    }
                    let loggedInViewControllerBuilder = Instantiator<LoggedInViewController> {
                        __safeDI_loggedInViewControllerBuilder(userManager: $0)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenReceivedPropertyIsAliasedAndExistential() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class Root {
                    @Instantiated
                    let childBuilder: Instantiator<Child>
                }
                """,
                """
                @Instantiable
                public final class Child {
                    @Forwarded
                    let iterator: IndexingIterator<Array<Element>>
                    @Instantiated
                    let grandchildBuilder: Instantiator<Grandchild>
                }
                """,
                """
                @Instantiable
                public final class Grandchild {
                    @Received(
                        fulfilledByDependencyNamed: "iterator",
                        ofType: IndexingIterator<Array<Element>>.self,
                        erasedToConcreteExistential: true
                    )
                    let anyIterator: AnyIterator
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    func __safeDI_childBuilder(iterator: IndexingIterator<Array<Element>>) -> Child {
                        func __safeDI_grandchildBuilder() -> Grandchild {
                            let anyIterator = AnyIterator(iterator)
                            return Grandchild(anyIterator: anyIterator)
                        }
                        let grandchildBuilder = Instantiator<Grandchild>(__safeDI_grandchildBuilder)
                        return Child(iterator: iterator, grandchildBuilder: grandchildBuilder)
                    }
                    let childBuilder = Instantiator<Child> {
                        __safeDI_childBuilder(iterator: $0)
                    }
                    self.init(childBuilder: childBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenReceivedPropertyIsAliasedALevelAboveWhereItIsReceived() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol UserVendor {
                    var user: User { get }
                }

                public protocol UserManager: UserVendor {
                    var user: User { get set }
                }

                public final class DefaultUserManager: UserManager {
                    public init(user: User) {
                        self.user = user
                    }

                    public var user: User
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User(username: username)
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: Instantiator<LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: Instantiator<LoggedInViewController>

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(UserManager(user: user))
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let userManager: UserManager

                    @Received(fulfilledByDependencyNamed: "networkService", ofType: NetworkService.self)
                    private let userNetworkService: NetworkService

                    @Instantiated
                    private let profileViewControllerBuilder: Instantiator<ProfileViewController>
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class ProfileViewController: UIViewController {
                    @Received(fulfilledByDependencyNamed: "userManager", ofType: UserManager.self)
                    private let userVendor: UserVendor

                    @Instantiated
                    private let editProfileViewControllerBuilder: Instantiator<EditProfileViewController>
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class EditProfileViewController: UIViewController {
                    @Received
                    private let userVendor: UserVendor
                    @Received
                    private let userManager: UserManager
                    @Received
                    private let userNetworkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(userManager: UserManager) -> LoggedInViewController {
                        let userNetworkService: NetworkService = networkService
                        func __safeDI_profileViewControllerBuilder() -> ProfileViewController {
                            let userVendor: UserVendor = userManager
                            func __safeDI_editProfileViewControllerBuilder() -> EditProfileViewController {
                                EditProfileViewController(userVendor: userVendor, userManager: userManager, userNetworkService: userNetworkService)
                            }
                            let editProfileViewControllerBuilder = Instantiator<EditProfileViewController>(__safeDI_editProfileViewControllerBuilder)
                            return ProfileViewController(userVendor: userVendor, editProfileViewControllerBuilder: editProfileViewControllerBuilder)
                        }
                        let profileViewControllerBuilder = Instantiator<ProfileViewController>(__safeDI_profileViewControllerBuilder)
                        return LoggedInViewController(userManager: userManager, userNetworkService: userNetworkService, profileViewControllerBuilder: profileViewControllerBuilder)
                    }
                    let loggedInViewControllerBuilder = Instantiator<LoggedInViewController> {
                        __safeDI_loggedInViewControllerBuilder(userManager: $0)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenReceivedPropertyIsAliasedWhenInstantiated() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User(username: username)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Received(fulfilledByDependencyNamed: "networkService", ofType: NetworkService.self, erasedToConcreteExistential: false)
                    let renamedNetworkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, loggedInViewControllerBuilder: Instantiator<LoggedInViewController>) {
                        self.authService = authService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let authService: AuthService = {
                        let networkService: NetworkService = DefaultNetworkService()
                        let renamedNetworkService: NetworkService = networkService
                        return DefaultAuthService(networkService: networkService, renamedNetworkService: renamedNetworkService)
                    }()
                    self.init(authService: authService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenReceivedPropertyIsAliasedTwice() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User(username: username)
                    }

                    @Received
                    let networkService: NetworkService

                    @Received(fulfilledByDependencyNamed: "networkService", ofType: NetworkService.self)
                    let renamedNetworkService: NetworkService

                    @Received(fulfilledByDependencyNamed: "renamedNetworkService", ofType: NetworkService.self)
                    let renamedAgainNetworkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: Instantiator<LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = {
                        let renamedNetworkService: NetworkService = networkService
                        let renamedAgainNetworkService: NetworkService = renamedNetworkService
                        return DefaultAuthService(networkService: networkService, renamedNetworkService: renamedNetworkService, renamedAgainNetworkService: renamedAgainNetworkService)
                    }()
                    self.init(authService: authService, networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenReceivedPropertyIsAliasedWhenForwarded() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol UserVendor {
                    var user: User { get }
                }

                public protocol UserManager: UserVendor {
                    var user: User { get set }
                }

                public final class DefaultUserManager: UserManager {
                    public init(user: User) {
                        self.user = user
                    }

                    public var user: User
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User(username: username)
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: Instantiator<LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: Instantiator<LoggedInViewController>

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(UserManager(user: user))
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let userManager: UserManager

                    @Received(fulfilledByDependencyNamed: "userManager", ofType: UserManager.self)
                    private let userVendor: UserVendor

                    @Instantiated
                    private let profileViewControllerBuilder: Instantiator<ProfileViewController>
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class ProfileViewController: UIViewController {
                    @Instantiated
                    private let editProfileViewControllerBuilder: Instantiator<EditProfileViewController>
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class EditProfileViewController: UIViewController {
                    @Received
                    private let userVendor: UserVendor
                    @Received
                    private let userManager: UserManager
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(userManager: UserManager) -> LoggedInViewController {
                        let userVendor: UserVendor = userManager
                        func __safeDI_profileViewControllerBuilder() -> ProfileViewController {
                            func __safeDI_editProfileViewControllerBuilder() -> EditProfileViewController {
                                EditProfileViewController(userVendor: userVendor, userManager: userManager)
                            }
                            let editProfileViewControllerBuilder = Instantiator<EditProfileViewController>(__safeDI_editProfileViewControllerBuilder)
                            return ProfileViewController(editProfileViewControllerBuilder: editProfileViewControllerBuilder)
                        }
                        let profileViewControllerBuilder = Instantiator<ProfileViewController>(__safeDI_profileViewControllerBuilder)
                        return LoggedInViewController(userManager: userManager, userVendor: userVendor, profileViewControllerBuilder: profileViewControllerBuilder)
                    }
                    let loggedInViewControllerBuilder = Instantiator<LoggedInViewController> {
                        __safeDI_loggedInViewControllerBuilder(userManager: $0)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenReceivedPropertyIsAliasedWasALevelBelowWhereItWasForwarded() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol UserVendor {
                    var user: User { get }
                }

                public protocol UserManager: UserVendor {
                    var user: User { get set }
                }

                public final class DefaultUserManager: UserManager {
                    public init(user: User) {
                        self.user = user
                    }

                    public var user: User
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User(username: username)
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: Instantiator<LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: Instantiator<LoggedInViewController>

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(UserManager(user: user))
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let userManager: UserManager

                    @Instantiated
                    private let profileViewControllerBuilder: Instantiator<ProfileViewController>
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class ProfileViewController: UIViewController {
                    @Instantiated
                    private let editProfileViewControllerBuilder: Instantiator<EditProfileViewController>
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class EditProfileViewController: UIViewController {
                    @Received(fulfilledByDependencyNamed: "userManager", ofType: UserManager.self)
                    private let userVendor: UserVendor
                    @Received
                    private let userManager: UserManager
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    func __safeDI_loggedInViewControllerBuilder(userManager: UserManager) -> LoggedInViewController {
                        func __safeDI_profileViewControllerBuilder() -> ProfileViewController {
                            func __safeDI_editProfileViewControllerBuilder() -> EditProfileViewController {
                                let userVendor: UserVendor = userManager
                                return EditProfileViewController(userVendor: userVendor, userManager: userManager)
                            }
                            let editProfileViewControllerBuilder = Instantiator<EditProfileViewController>(__safeDI_editProfileViewControllerBuilder)
                            return ProfileViewController(editProfileViewControllerBuilder: editProfileViewControllerBuilder)
                        }
                        let profileViewControllerBuilder = Instantiator<ProfileViewController>(__safeDI_profileViewControllerBuilder)
                        return LoggedInViewController(userManager: userManager, profileViewControllerBuilder: profileViewControllerBuilder)
                    }
                    let loggedInViewControllerBuilder = Instantiator<LoggedInViewController> {
                        __safeDI_loggedInViewControllerBuilder(userManager: $0)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenFirstPropertyDependsOnLastPropertyAndMiddlePropertyHasNoDependencyEntanglementsWithEither() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class Root {
                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable
                public final class Unrelated {}
                """,
                """
                @Instantiable
                public final class Child {
                    @Instantiated
                    let grandchild: Grandchild
                    @Instantiated
                    let unrelated: Unrelated
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable
                public final class Grandchild {
                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable
                public final class GreatGrandchild {}
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child: Child = {
                        let greatGrandchild = GreatGrandchild()
                        let grandchild = Grandchild(greatGrandchild: greatGrandchild)
                        let unrelated = Unrelated()
                        return Child(grandchild: grandchild, unrelated: unrelated, greatGrandchild: greatGrandchild)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootHasLotsOfDependenciesThatDependOnOneAnother() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class Root {
                    @Instantiated
                    let a: A
                    @Instantiated
                    let b: B
                    @Instantiated
                    let c: C
                    @Instantiated
                    let d: D
                    @Instantiated
                    let e: E
                    @Instantiated
                    let f: F
                    @Instantiated
                    let g: G
                    @Instantiated
                    let h: H
                    @Instantiated
                    let i: I
                    @Instantiated
                    let j: J
                    @Instantiated
                    let k: K
                    @Instantiated
                    let l: L
                    @Instantiated
                    let m: M
                    @Instantiated
                    let n: N
                    @Instantiated
                    let o: O
                    @Instantiated
                    let p: P
                    @Instantiated
                    let q: Q
                    @Instantiated
                    let r: R
                    @Instantiated
                    let s: S
                    @Instantiated
                    let t: T
                    @Instantiated
                    let u: U
                    @Instantiated
                    let v: V
                    @Instantiated
                    let w: W
                    @Instantiated
                    let x: X
                    @Instantiated
                    let y: Y
                    @Instantiated
                    let z: Z
                }
                """,
                """
                @Instantiable
                public final class A {
                    @Received
                    let x: X
                }
                """,
                """
                @Instantiable
                public final class B {
                    @Received
                    let a: A
                    @Received
                    let d: D
                    @Received
                    let t: T
                    @Received
                    let o: O
                    @Received
                    let y: Y
                    @Received
                    let s: S
                }
                """,
                """
                @Instantiable
                public final class C {
                    @Received
                    let u: U
                    @Received
                    let n: N
                    @Received
                    let y: Y
                }
                """,
                """
                @Instantiable
                public final class D {
                    @Received
                    let o: O
                    @Received
                    let g: G
                }
                """,
                """
                @Instantiable
                public final class E {
                    @Received
                    let g: G
                }
                """,
                """
                @Instantiable
                public final class F {
                    @Received
                    let a: A
                    @Received
                    let x: X
                }
                """,
                """
                @Instantiable
                public final class G {}
                """,
                """
                @Instantiable
                public final class H {
                    @Received
                    let u: U
                    @Received
                    let g: G
                }
                """,
                """
                @Instantiable
                public final class I {
                    @Received
                    let f: F
                }
                """,
                """
                @Instantiable
                public final class J {
                    @Received
                    let a: A
                    @Received
                    let g: G
                }
                """,
                """
                @Instantiable
                public final class K {
                    @Received
                    let i: I
                    @Received
                    let t: T
                }
                """,
                """
                @Instantiable
                public final class L {
                    @Received
                    let o: O
                    @Received
                    let v: V
                    @Received
                    let e: E
                }
                """,
                """
                @Instantiable
                public final class M {
                    @Received
                    let e: E
                }
                """,
                """
                @Instantiable
                public final class N {
                    @Received
                    let o: O
                    @Received
                    let p: P
                    @Received
                    let e: E
                }
                """,
                """
                @Instantiable
                public final class O {
                    @Received
                    let m: M
                    @Received
                    let e: E
                    @Received
                    let g: G
                    @Received
                    let a: A
                }
                """,
                """
                @Instantiable
                public final class P {
                    @Received
                    let i: I
                    @Received
                    let x: X
                }
                """,
                """
                @Instantiable
                public final class Q {
                    @Received
                    let u: U
                    @Received
                    let t: T
                    @Received
                    let e: E
                }
                """,
                """
                @Instantiable
                public final class R {
                    @Received
                    let a: A
                    @Received
                    let m: M
                    @Received
                    let o: O
                    @Received
                    let n: N
                    @Received
                    let e: E
                }
                """,
                """
                @Instantiable
                public final class S {
                    @Received
                    let a: A
                    @Received
                    let t: T
                    @Received
                    let o: O
                    @Received
                    let r: R
                }
                """,
                """
                @Instantiable
                public final class T {
                    @Received
                    let e: E
                    @Received
                    let n: N
                }
                """,
                """
                @Instantiable
                public final class U {
                    @Received
                    let p: P
                    @Received
                    let d: D
                    @Received
                    let o: O
                    @Received
                    let w: W
                    @Received
                    let n: N
                }
                """,
                """
                @Instantiable
                public final class V {
                    @Received
                    let a: A
                    @Received
                    let t: T
                    @Received
                    let o: O
                    @Received
                    let f: F
                    @Received
                    let c: C
                    @Received
                    let i: I
                    @Received
                    let d: D
                }
                """,
                """
                @Instantiable
                public final class W {
                    @Received
                    let a: A
                    @Received
                    let x: X
                    @Received
                    let o: O
                    @Received
                    let n: N
                }
                """,
                """
                @Instantiable
                public final class X {}
                """,
                """
                @Instantiable
                public final class Y {
                    @Received
                    let u: U
                    @Received
                    let p: P
                }
                """,
                """
                @Instantiable
                public final class Z {
                    @Received
                    let e: E
                    @Received
                    let p: P
                    @Received
                    let l: L
                    @Received
                    let i: I
                    @Received
                    let n: N
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let x = X()
                    let a = A(x: x)
                    let g = G()
                    let e = E(g: g)
                    let m = M(e: e)
                    let o = O(m: m, e: e, g: g, a: a)
                    let d = D(o: o, g: g)
                    let f = F(a: a, x: x)
                    let i = I(f: f)
                    let p = P(i: i, x: x)
                    let n = N(o: o, p: p, e: e)
                    let r = R(a: a, m: m, o: o, n: n, e: e)
                    let t = T(e: e, n: n)
                    let s = S(a: a, t: t, o: o, r: r)
                    let w = W(a: a, x: x, o: o, n: n)
                    let u = U(p: p, d: d, o: o, w: w, n: n)
                    let y = Y(u: u, p: p)
                    let b = B(a: a, d: d, t: t, o: o, y: y, s: s)
                    let c = C(u: u, n: n, y: y)
                    let h = H(u: u, g: g)
                    let j = J(a: a, g: g)
                    let k = K(i: i, t: t)
                    let v = V(a: a, t: t, o: o, f: f, c: c, i: i, d: d)
                    let l = L(o: o, v: v, e: e)
                    let q = Q(u: u, t: t, e: e)
                    let z = Z(e: e, p: p, l: l, i: i, n: n)
                    self.init(a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h, i: i, j: j, k: k, l: l, m: m, n: n, o: o, p: p, q: q, r: r, s: s, t: t, u: u, v: v, w: w, x: x, y: y, z: z)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootPropertyWithOptionalInstantiator() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class Root {
                    @Instantiated
                    let childBuilder: Instantiator<Child>?
                }
                """,
                """
                @Instantiable
                public final class Child {}
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    func __safeDI_childBuilder() -> Child {
                        Child()
                    }
                    let childBuilder: Instantiator<Child>? = Instantiator<Child>(__safeDI_childBuilder)
                    self.init(childBuilder: childBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenLazyInstantiationCycleExists() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated
                    let aBuilder: Instantiator<A>
                }
                """,
                """
                @Instantiable
                public struct A {
                    @Instantiated
                    let bBuilder: Instantiator<B>
                }
                """,
                """
                @Instantiable
                public struct B {
                    @Instantiated
                    let cBuilder: Instantiator<C>
                }
                """,
                """
                @Instantiable
                public struct C {
                    @Instantiated
                    let aBuilder: Instantiator<A>
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public init() {
                    func __safeDI_aBuilder() -> A {
                        func __safeDI_bBuilder() -> B {
                            func __safeDI_cBuilder() -> C {
                                let aBuilder = Instantiator<A>(__safeDI_aBuilder)
                                return C(aBuilder: aBuilder)
                            }
                            let cBuilder = Instantiator<C>(__safeDI_cBuilder)
                            return B(cBuilder: cBuilder)
                        }
                        let bBuilder = Instantiator<B>(__safeDI_bBuilder)
                        return A(bBuilder: bBuilder)
                    }
                    let aBuilder = Instantiator<A>(__safeDI_aBuilder)
                    self.init(aBuilder: aBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenPartiallyLazyInstantiationCycleExists() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated
                    let a: A
                }
                """,
                """
                @Instantiable
                public struct A {
                    @Instantiated
                    let b: B
                }
                """,
                """
                @Instantiable
                public struct B {
                    @Instantiated
                    let cBuilder: Instantiator<C>
                }
                """,
                """
                @Instantiable
                public struct C {
                    @Instantiated
                    let a: A
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public init() {
                    let a: A = {
                        let b: B = {
                            func __safeDI_cBuilder() -> C {
                                let a = A(b: b)
                                return C(a: a)
                            }
                            let cBuilder = Instantiator<C>(__safeDI_cBuilder)
                            return B(cBuilder: cBuilder)
                        }()
                        return A(b: b)
                    }()
                    self.init(a: a)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenLazySelfInstantiationCycleExists() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated
                    let a: A
                }
                """,
                """
                @Instantiable
                public struct A {
                    @Instantiated
                    let aBuilder: Instantiator<A>
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public init() {
                    let a: A = {
                        func __safeDI_aBuilder() -> A {
                            let aBuilder = Instantiator<A>(__safeDI_aBuilder)
                            return A(aBuilder: aBuilder)
                        }
                        let aBuilder = Instantiator<A>(__safeDI_aBuilder)
                        return A(aBuilder: aBuilder)
                    }()
                    self.init(a: a)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenLazySelfForwardingInstantiationCycleExists() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated
                    let aBuilder: Instantiator<A>
                }
                """,
                """
                @Instantiable
                public struct A {
                    @Instantiated
                    let aBuilder: Instantiator<A>
                    @Forwarded
                    let context: String
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public init() {
                    func __safeDI_aBuilder(context: String) -> A {
                        let aBuilder = Instantiator<A> {
                            __safeDI_aBuilder(context: $0)
                        }
                        return A(aBuilder: aBuilder, context: context)
                    }
                    let aBuilder = Instantiator<A> {
                        __safeDI_aBuilder(context: $0)
                    }
                    self.init(aBuilder: aBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenAGenericTypeIsAnExtendedInstantiableWithMultipleGenericReturnTypes() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated let stringContainer: Container<String>
                    @Instantiated let intContainer: Container<Int>
                    @Instantiated let floatContainer: Container<Float>
                    @Instantiated let voidContainer: Container<Void>
                }
                """,
                """
                public struct Container<T> {
                    let value: T
                }
                @Instantiable
                extension Container: Instantiable {
                    public static func instantiate() -> Container<String> {
                        .init(value: "")
                    }
                    public static func instantiate() -> Container<Int> {
                        .init(value: 0)
                    }
                    public static func instantiate() -> Container<Float> {
                        .init(value: 0)
                    }
                    public static func instantiate() -> Container<Void> {
                        .init(value: ())
                    }
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public init() {
                    let stringContainer: Container<String> = Container<String>.instantiate()
                    let intContainer: Container<Int> = Container<Int>.instantiate()
                    let floatContainer: Container<Float> = Container<Float>.instantiate()
                    let voidContainer: Container<Void> = Container<Void>.instantiate()
                    self.init(stringContainer: stringContainer, intContainer: intContainer, floatContainer: floatContainer, voidContainer: voidContainer)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenAGenericTypeIsAnExtendedInstantiableWithMultipleGenericFullyQualifiedReturnTypes() async throws {
        let output = try await executeSafeDIToolTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated let stringContainer: MyModule.Container<String>
                    @Instantiated let intContainer: MyModule.Container<Int>
                    @Instantiated let floatContainer: MyModule.Container<Float>
                    @Instantiated let voidContainer: MyModule.Container<Void>
                }
                """,
                """
                public struct Container<T> {
                    let value: T
                }
                @Instantiable
                extension MyModule.Container: Instantiable {
                    public static func instantiate() -> MyModule.Container<String> {
                        .init(value: "")
                    }
                    public static func instantiate() -> MyModule.Container<Int> {
                        .init(value: 0)
                    }
                    public static func instantiate() -> MyModule.Container<Float> {
                        .init(value: 0)
                    }
                    public static func instantiate() -> MyModule.Container<Void> {
                        .init(value: ())
                    }
                }
                """,
            ],
            buildDependencyTreeOutput: true,
            filesToDelete: &filesToDelete
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public init() {
                    let stringContainer: MyModule.Container<String> = MyModule.Container<String>.instantiate()
                    let intContainer: MyModule.Container<Int> = MyModule.Container<Int>.instantiate()
                    let floatContainer: MyModule.Container<Float> = MyModule.Container<Float>.instantiate()
                    let voidContainer: MyModule.Container<Void> = MyModule.Container<Void>.instantiate()
                    self.init(stringContainer: stringContainer, intContainer: intContainer, floatContainer: floatContainer, voidContainer: voidContainer)
                }
            }
            """
        )
    }

    // MARK: Private

    private var filesToDelete = [URL]()
}
