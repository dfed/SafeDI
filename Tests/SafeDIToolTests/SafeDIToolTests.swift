// Distributed under the MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import SafeDICore
import XCTest

@testable import SafeDITool

final class SafeDIToolTests: XCTestCase {

    // MARK: XCTestCase

    override func setUpWithError() throws {
        try super.setUpWithError()

        filesToDelete = [URL]()
    }

    override func tearDownWithError() throws {
        try super.tearDownWithError()

        for fileToDelete in filesToDelete {
            try FileManager.default.removeItem(at: fileToDelete)
        }
    }

    // MARK: Code Generation Tests

    func test_run_successfullyGeneratesOutputFileWhenNoCodeInput() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            // No root @Instantiable-decorated types found, or root types already had a `public init()` method.
            """
        )
    }

    func test_run_doesNotWriteExtensionIfRootAlreadyHasEmptyInitializer() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                    let urlSession: URLSession = .shared
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            // No root @Instantiable-decorated types found, or root types already had a `public init()` method.
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootIsClass() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                    let urlSession: URLSession = .shared
                }
                """,
                """
                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootIsActor() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                import class Foundation.URLSession

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                    let urlSession: URLSession = .shared
                }
                """,
                """
                @Instantiable
                public actor Root {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import class Foundation.URLSession
            #endif

            extension Root {
                public init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootIsStruct() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                    let urlSession: URLSession = .shared
                }
                """,
                """
                @Instantiable
                public struct Root {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root {
                public init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenMultipleRootsExist() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                    let urlSession: URLSession = .shared
                }
                """,
                """
                @Instantiable
                public struct Root1 {
                    @Instantiated
                    let networkService: NetworkService
                }
                """,
                """
                @Instantiable
                public struct Root2 {
                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root1 {
                public init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }

            extension Root2 {
                public init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootHasAnAnyProperty() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated
                    private let userService: any UserService
                }
                """,
                """
                import Foundation

                public protocol UserService {
                    var userName: String? { get set }
                }

                @Instantiable(fulfillingAdditionalTypes: [UserService.self])
                public final class DefaultUserService: UserService {
                    public init() {}

                    public var userName: String?
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root {
                public init() {
                    let userService: any UserService = DefaultUserService()
                    self.init(userService: userService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootHasAnOptionalProperty() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable
                public struct Root {
                    @Instantiated
                    private let userService: UserService?
                }
                """,
                """
                import Foundation

                public protocol UserService {
                    var userName: String? { get set }
                }

                @Instantiable(fulfillingAdditionalTypes: [UserService.self])
                public final class DefaultUserService: UserService {
                    public init() {}

                    public var userName: String?
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root {
                public init() {
                    let userService: UserService? = DefaultUserService()
                    self.init(userService: userService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootHasMultipleLayers() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<User, UIViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated(fulfilledByType: "LoggedInViewController")
                    let loggedInViewControllerBuilder: ForwardingInstantiator<User, UIViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    public init(user: User, networkService: NetworkService) {
                        self.user = user
                        self.networkService = networkService
                    }

                    @Forwarded
                    private let user: User

                    @Received
                    let networkService: NetworkService
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<User, UIViewController> { user in
                        LoggedInViewController(user: user, networkService: networkService)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizedSingleForwardedPropertyInSubBuilders() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    public init(user: User) {
                        self.user = user
                    }

                    @Received
                    let user: User
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    public init(user: User, networkService: NetworkService, userService: UserService) {
                        self.user = user
                        self.networkService = networkService
                        self.userService = userService
                    }

                    @Forwarded
                    private let user: User

                    @Received
                    let networkService: NetworkService

                    @Instantiated
                    let userService: UserService
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<User, LoggedInViewController> { user in
                        let userService = UserService(user: user)
                        return LoggedInViewController(user: user, networkService: networkService, userService: userService)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizedMultipleForwardedPropertiesInSubBuilders() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                public struct User {
                    public var id: String
                    public var name: String
                }
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<(userID: String, userName: String), UIViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated(fulfilledByType: "LoggedInViewController")
                    let loggedInViewControllerBuilder: ForwardingInstantiator<(userID: String, userName: String), UIViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate((userID: user.id, userName: user.name))
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    @Received
                    let userName: String

                    @Received
                    let userID: String
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let userName: String

                    @Forwarded
                    private let userID: String

                    @Received
                    let networkService: NetworkService

                    @Instantiated
                    let userService: UserService
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<(userID: String, userName: String), UIViewController> { userID, userName in
                        let userService = UserService(userName: userName, userID: userID)
                        return LoggedInViewController(userName: userName, userID: userID, networkService: networkService, userService: userService)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizedMultipleForwardedPropertiesAndDependencyInversionInSubBuilders() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                public struct User {
                    public var id: String
                    public var name: String
                }
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<LoggedInViewController.ForwardedArguments, UIViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated(fulfilledByType: "LoggedInViewController")
                    let loggedInViewControllerBuilder: ForwardingInstantiator<LoggedInViewController.ForwardedArguments, UIViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate((userID: user.id, userName: user.name))
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    @Received
                    let userName: String

                    @Received
                    let userID: String
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let userName: String

                    @Forwarded
                    private let userID: String

                    @Received
                    let networkService: NetworkService

                    @Instantiated
                    let userService: UserService
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<LoggedInViewController.ForwardedArguments, UIViewController> { userID, userName in
                        let userService = UserService(userName: userName, userID: userID)
                        return LoggedInViewController(userName: userName, userID: userID, networkService: networkService, userService: userService)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizePropertiesNotDirectlyProvidedByParent() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    public init(networkService: NetworkService, user: User) {
                        self.networkService = networkService
                        self.user = user
                    }

                    @Received
                    let user: User

                    @Received
                    private let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    public init(user: User, userService: UserService) {
                        self.user = user
                        self.userService = userService
                    }

                    @Forwarded
                    private let user: User

                    @Instantiated
                    let userService: UserService
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<User, LoggedInViewController> { user in
                        let userService = UserService(networkService: networkService, user: user)
                        return LoggedInViewController(user: user, userService: userService)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleLayersOfInstantiators() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    public init(networkService: NetworkService, user: User) {
                        self.networkService = networkService
                        self.user = user
                    }

                    @Received
                    let user: User

                    @Received
                    private let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    public init(user: User, userServiceInstantiator: Instantiator<UserService>) {
                        self.user = user
                        self.userServiceInstantiator = userServiceInstantiator
                    }

                    @Forwarded
                    private let user: User

                    @Instantiated
                    let userServiceInstantiator: Instantiator<UserService>
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<User, LoggedInViewController> { user in
                        let userServiceInstantiator = Instantiator<UserService> {
                            UserService(networkService: networkService, user: user)
                        }
                        return LoggedInViewController(user: user, userServiceInstantiator: userServiceInstantiator)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertyWithMissingInstantiableInitializer() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    public init(child: Child) {
                        self.child = child
                    }

                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable()
                public final class Child {
                    // This Child is incorrectly configured! It is missing the required initializer.

                    @Instantiated
                    let grandchild: Grandchild

                    let uninitializedProperty: Int
                }
                """,
                """
                @Instantiable()
                public final class Grandchild {
                    public init() {}
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child = {
                        let grandchild = Grandchild()
                        return Child(/* @Instantiable type is incorrectly configured. Fix errors from @Instantiable macro to fix this error. */)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertyWithNotPublicInstantiableInitializer() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    public init(child: Child) {
                        self.child = child
                    }

                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable()
                final class Child {
                    public init(grandchild: Grandchild) {
                        self.grandchild = grandchild
                    }

                    @Instantiated
                    let grandchild: Grandchild
                }
                """,
                """
                @Instantiable()
                public final class Grandchild {
                    public init() {}
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child = {
                        let grandchild = Grandchild()
                        return Child(grandchild: grandchild)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesNonPublicProperty() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    public init(child: Child) {
                        self.child = child
                    }

                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable()
                final class Child {
                    public init(grandchild: Grandchild) {
                        self.grandchild = grandchild
                    }

                    @Instantiated
                    let grandchild: Grandchild
                }
                """,
                """
                @Instantiable()
                public final class Grandchild {
                    public init() {}
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child = {
                        let grandchild = Grandchild()
                        return Child(grandchild: grandchild)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleTreesThatReceiveTheSameProperty() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    public init(childA: ChildA, childB: ChildB, greatGrandchild: GreatGrandchild) {
                        self.childA = childA
                        self.childB = childB
                        self.greatGrandchild = greatGrandchild
                    }

                    @Instantiated
                    let childA: ChildA
                    @Instantiated
                    let childB: ChildB
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class ChildA {
                    public init(grandchildAA: GrandchildAA, grandchildAB: GrandchildAB) {
                        self.grandchildAA = grandchildAA
                        self.grandchildAB = grandchildAB
                    }

                    @Instantiated
                    let grandchildAA: GrandchildAA
                    @Instantiated
                    let grandchildAB: GrandchildAB
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAA {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAB {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class ChildB {
                    public init(grandchildBA: GrandchildBA, grandchildBB: GrandchildBB) {
                        self.grandchildAA = grandchildAA
                        self.grandchildAB = grandchildAB
                    }

                    @Instantiated
                    let grandchildBA: GrandchildBA
                    @Instantiated
                    let grandchildBB: GrandchildBB
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBA {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBB {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GreatGrandchild {
                    public init() {}
                }
                """,

            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let greatGrandchild = GreatGrandchild()
                    let childA = {
                        let grandchildAA = GrandchildAA(greatGrandchild: greatGrandchild)
                        let grandchildAB = GrandchildAB(greatGrandchild: greatGrandchild)
                        return ChildA(grandchildAA: grandchildAA, grandchildAB: grandchildAB)
                    }()
                    let childB = {
                        let grandchildBA = GrandchildBA(greatGrandchild: greatGrandchild)
                        let grandchildBB = GrandchildBB(greatGrandchild: greatGrandchild)
                        return ChildB(grandchildBA: grandchildBA, grandchildBB: grandchildBB)
                    }()
                    self.init(childA: childA, childB: childB, greatGrandchild: greatGrandchild)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleTreesThatInstantiateTheSamePropertyInMiddleLevel() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    public init(childA: ChildA, childB: ChildB) {
                        self.childA = childA
                        self.childB = childB
                    }

                    @Instantiated
                    let childA: ChildA
                    @Instantiated
                    let childB: ChildB
                }
                """,
                """
                @Instantiable()
                public final class ChildA {
                    public init(grandchildAA: GrandchildAA, grandchildAB: GrandchildAB, greatGrandchild: GreatGrandchild) {
                        self.grandchildAA = grandchildAA
                        self.grandchildAB = grandchildAB
                        self.greatGrandchild = greatGrandchild
                    }

                    @Instantiated
                    let grandchildAA: GrandchildAA
                    @Instantiated
                    let grandchildAB: GrandchildAB
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAA {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAB {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class ChildB {
                    public init(grandchildBA: GrandchildBA, grandchildBB: GrandchildBB, greatGrandchild: GreatGrandchild) {
                        self.grandchildAA = grandchildAA
                        self.grandchildAB = grandchildAB
                        self.greatGrandchild = greatGrandchild
                    }

                    @Instantiated
                    let grandchildBA: GrandchildBA
                    @Instantiated
                    let grandchildBB: GrandchildBB
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBA {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBB {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Received
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GreatGrandchild {
                    public init() {}
                }
                """,

            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let childA = {
                        let greatGrandchild = GreatGrandchild()
                        let grandchildAA = GrandchildAA(greatGrandchild: greatGrandchild)
                        let grandchildAB = GrandchildAB(greatGrandchild: greatGrandchild)
                        return ChildA(grandchildAA: grandchildAA, grandchildAB: grandchildAB, greatGrandchild: greatGrandchild)
                    }()
                    let childB = {
                        let greatGrandchild = GreatGrandchild()
                        let grandchildBA = GrandchildBA(greatGrandchild: greatGrandchild)
                        let grandchildBB = GrandchildBB(greatGrandchild: greatGrandchild)
                        return ChildB(grandchildBA: grandchildBA, grandchildBB: grandchildBB, greatGrandchild: greatGrandchild)
                    }()
                    self.init(childA: childA, childB: childB)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithSingleTreeThatInstantiateTheSamePropertyAtMultipleLevels() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable
                public final class Root {
                    @Instantiated
                    let child: Child
                }
                """,
                """
                @Instantiable
                public final class Recreated {}
                """,
                """
                @Instantiable
                public final class Child {
                    @Instantiated
                    let grandchild: Grandchild
                    @Instantiated
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class Grandchild {
                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                    @Instantiated
                    let recreated: Recreated
                }
                """,
                """
                @Instantiable
                public final class GreatGrandchild {
                    @Received
                    let recreated: Recreated
                }
                """,

            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let child = {
                        let grandchild = {
                            let recreated = Recreated()
                            let greatGrandchild = GreatGrandchild(recreated: recreated)
                            return Grandchild(greatGrandchild: greatGrandchild, recreated: recreated)
                        }()
                        let recreated = Recreated()
                        return Child(grandchild: grandchild, recreated: recreated)
                    }()
                    self.init(child: child)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleTreesThatInstantiateTheSamePropertyMultipleLayersDeep() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    public init(childA: ChildA, childB: ChildB) {
                        self.childA = childA
                        self.childB = childB
                    }

                    @Instantiated
                    let childA: ChildA
                    @Instantiated
                    let childB: ChildB
                }
                """,
                """
                @Instantiable()
                public final class ChildA {
                    public init(grandchildAA: GrandchildAA, grandchildAB: GrandchildAB) {
                        self.grandchildAA = grandchildAA
                        self.grandchildAB = grandchildAB
                    }

                    @Instantiated
                    let grandchildAA: GrandchildAA
                    @Instantiated
                    let grandchildAB: GrandchildAB
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAA {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildAB {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class ChildB {
                    public init(grandchildBA: GrandchildBA, grandchildBB: GrandchildBB) {
                        self.grandchildAA = grandchildAA
                        self.grandchildAB = grandchildAB
                    }

                    @Instantiated
                    let grandchildBA: GrandchildBA
                    @Instantiated
                    let grandchildBB: GrandchildBB
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBA {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GrandchildBB {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                @Instantiable()
                public final class GreatGrandchild {
                    public init() {}
                }
                """,

            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            extension Root {
                public convenience init() {
                    let childA = {
                        let grandchildAA = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildAA(greatGrandchild: greatGrandchild)
                        }()
                        let grandchildAB = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildAB(greatGrandchild: greatGrandchild)
                        }()
                        return ChildA(grandchildAA: grandchildAA, grandchildAB: grandchildAB)
                    }()
                    let childB = {
                        let grandchildBA = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildBA(greatGrandchild: greatGrandchild)
                        }()
                        let grandchildBB = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildBB(greatGrandchild: greatGrandchild)
                        }()
                        return ChildB(grandchildBA: grandchildBA, grandchildBB: grandchildBB)
                    }()
                    self.init(childA: childA, childB: childB)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesExtendedInstantiablePropertyWithNoArguments() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class Root {
                    public init(child: Child, keyValueStore: KeyValueStore) {
                        self.child = child
                        self.keyValueStore = keyValueStore
                    }

                    @Instantiated
                    let child: Child
                    @Instantiated
                    let keyValueStore: KeyValueStore
                }
                """,
                """
                @Instantiable()
                public final class Child {
                    public init(keyValueStore: KeyValueStore) {
                        self.keyValueStore = keyValueStore
                    }

                    @Received
                    let keyValueStore: KeyValueStore
                }
                """,
                """
                import Foundation

                public protocol KeyValueStore {}

                @Instantiable(fulfillingAdditionalTypes: [KeyValueStore.self])
                extension UserDefaults: KeyValueStore {
                    public static func instantiate() -> UserDefaults {
                        getShared()
                    }

                    private func getShared() -> UserDefaults { .standard }

                    final class NestedClass {}
                    actor NestedActor {}
                    struct NestedStruct {
                        public func instantiate() -> NestedStruct { init() }
                    }
                    typealias NestedTypealias = ()
                    private var sessionType: String { "foreground" }
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif

            extension Root {
                public convenience init() {
                    let keyValueStore: KeyValueStore = UserDefaults.instantiate()
                    let child = Child(keyValueStore: keyValueStore)
                    self.init(child: child, keyValueStore: keyValueStore)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesExtendedInstantiablePropertyWithArguments() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                public struct User {
                    let username: String
                }
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User(username: username)
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<User, UIViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated(fulfilledByType: "LoggedInViewController")
                    let loggedInViewControllerBuilder: ForwardingInstantiator<User, UIViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    public init(user: User, networkService: NetworkService, keyValueStore: KeyValueStore) {
                        self.user = user
                        self.networkService = networkService
                        self.keyValueStore = keyValueStore
                    }

                    @Forwarded
                    private let user: User

                    @Received
                    let networkService: NetworkService

                    @Instantiated
                    let keyValueStore: KeyValueStore
                }
                """,
                """
                import Foundation

                public protocol KeyValueStore {}

                @Instantiable(fulfillingAdditionalTypes: [KeyValueStore.self])
                extension UserDefaults {
                    public static func instantiate(user: User) -> UserDefaults {
                        UserDefaults(user: user)
                    }

                    convenience
                    init(user: User) {
                        self.init(suiteName: user.username)
                    }
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(Foundation)
            import Foundation
            #endif
            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<User, UIViewController> { user in
                        let keyValueStore: KeyValueStore = UserDefaults.instantiate(user: user)
                        return LoggedInViewController(user: user, networkService: networkService, keyValueStore: keyValueStore)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleTreesThatInstantiateTheSamePropertyAcrossMultipleModules() async throws {
        let greatGrandchildModuleOutput = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                @Instantiable()
                public final class GreatGrandchild {
                    public init() {}
                }
                """,
            ],
            buildDependencyTreeOutput: false
        )

        let grandchildModuleOutput = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                import GreatGrandchildModule

                @Instantiable()
                public final class GrandchildAA {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                import GreatGrandchildModule

                @Instantiable()
                public final class GrandchildAB {
                    public init(greatGrandchild: GreatGrandchild) {
                        self.greatGrandchild = greatGrandchild
                    }

                    @Instantiated
                    let greatGrandchild: GreatGrandchild
                }
                """,
                """
                import GreatGrandchildModule

                @Instantiable()
                public final class GrandchildBA {
                    public init(greatGrandchildInstantiator: Instantiator<GreatGrandchild>) {
                        self.greatGrandchildInstantiator = greatGrandchildInstantiator
                    }

                    @Instantiated
                    var greatGrandchildInstantiator: Instantiator<GreatGrandchild>
                }
                """,
                """
                import GreatGrandchildModule

                @Instantiable()
                public final class GrandchildBB {
                    public init(greatGrandchildInstantiator: Instantiator<GreatGrandchild>) {
                        self.greatGrandchildInstantiator = greatGrandchildInstantiator
                    }

                    @Instantiated
                    greatGrandchildInstantiator: Instantiator<GreatGrandchild>
                }
                """,
            ],
            dependentModuleOutputPaths: [greatGrandchildModuleOutput.moduleInfoOutputPath],
            buildDependencyTreeOutput: false
        )

        let childModuleOutput = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                import class GrandchildModule.GrandchildAA
                import class GrandchildModule.GrandchildAB

                @Instantiable()
                public final class ChildA {
                    public init(grandchildAA: GrandchildAA, grandchildAB: GrandchildAB) {
                        self.grandchildAA = grandchildAA
                        self.grandchildAB = grandchildAB
                    }

                    @Instantiated
                    let grandchildAA: GrandchildAA
                    @Instantiated
                    let grandchildAB: GrandchildAB
                }
                """,
                """
                import GrandchildModule

                @Instantiable()
                public final class ChildB {
                    public init(grandchildBA: GrandchildBA, grandchildBB: GrandchildBB) {
                        self.grandchildAA = grandchildAA
                        self.grandchildAB = grandchildAB
                    }

                    @Instantiated
                    let grandchildBA: GrandchildBA
                    @Instantiated
                    let grandchildBB: GrandchildBB
                }
                """,
            ],
            dependentModuleOutputPaths: [
                greatGrandchildModuleOutput.moduleInfoOutputPath,
                grandchildModuleOutput.moduleInfoOutputPath
            ],
            buildDependencyTreeOutput: false
        )

        let topLevelModuleOutput = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                import ChildModule

                @Instantiable()
                public final class Root {
                    public init(childA: ChildA, childB: ChildB) {
                        self.childA = childA
                        self.childB = childB
                    }

                    @Instantiated
                    let childA: ChildA
                    @Instantiated
                    let childB: ChildB
                }
                """
            ],
            dependentModuleOutputPaths: [
                greatGrandchildModuleOutput.moduleInfoOutputPath,
                grandchildModuleOutput.moduleInfoOutputPath,
                childModuleOutput.moduleInfoOutputPath
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(topLevelModuleOutput.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(ChildModule)
            import ChildModule
            #endif
            #if canImport(GrandchildModule)
            import GrandchildModule
            #endif
            #if canImport(GreatGrandchildModule)
            import GreatGrandchildModule
            #endif

            extension Root {
                public convenience init() {
                    let childA = {
                        let grandchildAA = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildAA(greatGrandchild: greatGrandchild)
                        }()
                        let grandchildAB = {
                            let greatGrandchild = GreatGrandchild()
                            return GrandchildAB(greatGrandchild: greatGrandchild)
                        }()
                        return ChildA(grandchildAA: grandchildAA, grandchildAB: grandchildAB)
                    }()
                    let childB = {
                        let grandchildBA = {
                            let greatGrandchildInstantiator = Instantiator<GreatGrandchild> {
                                GreatGrandchild()
                            }
                            return GrandchildBA(greatGrandchildInstantiator: greatGrandchildInstantiator)
                        }()
                        let grandchildBB = {
                            let greatGrandchildInstantiator = Instantiator<GreatGrandchild> {
                                GreatGrandchild()
                            }
                            return GrandchildBB(greatGrandchildInstantiator: greatGrandchildInstantiator)
                        }()
                        return ChildB(grandchildBA: grandchildBA, grandchildBB: grandchildBB)
                    }()
                    self.init(childA: childA, childB: childB)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenReceivedPropertyIsRenamed() async throws {
        let output = try await executeSystemUnderTest(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol UserVendor {
                    var user: User { get }
                }

                public protocol UserManager: UserVendor {
                    var user: User { get set }
                }

                public final class DefaultUserManager: UserManager {
                    public init(user: User) {
                        self.user = user
                    }

                    public var user: User
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public func login(username: String, password: String) async -> User {
                        User(username: username)
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: ForwardingInstantiator<UserManager, LoggedInViewController>

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(UserManager(user: user))
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {
                    @Forwarded
                    private let userManager: UserManager

                    @Instantiated
                    private let profileViewControllerBuilder: Instantiator<ProfileViewController>
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class ProfileViewController: UIViewController {
                    @Received(fulfilledByDependencyNamed: "userManager", ofType: UserManager.self)
                    private let userVendor: UserVendor

                    @Instantiated
                    private let editProfileViewControllerBuilder: Instantiator<EditProfileViewController>
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class EditProfileViewController: UIViewController {
                    @Received
                    private let userVendor: UserVendor
                    @Received
                    private let userManager: UserManager
                }
                """,
            ],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            #if canImport(UIKit)
            import UIKit
            #endif

            extension RootViewController {
                public convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<UserManager, LoggedInViewController> { userManager in
                        let profileViewControllerBuilder = Instantiator<ProfileViewController> {
                            let userVendor: UserVendor = userManager
                            let editProfileViewControllerBuilder = Instantiator<EditProfileViewController> {
                                EditProfileViewController(userVendor: userVendor, userManager: userManager)
                            }
                            return ProfileViewController(userVendor: userVendor, editProfileViewControllerBuilder: editProfileViewControllerBuilder)
                        }
                        return LoggedInViewController(userManager: userManager, profileViewControllerBuilder: profileViewControllerBuilder)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    // MARK: Error Tests

    func test_run_onCodeWithPropertyWithUnknownFulfilledType_throwsError() async {
        await assertThrowsError(
            """
            No `@Instantiable`-decorated type or extension found to fulfill `@Instantiated`-decorated property with type `DoesNotExist`
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated(fulfilledByType: "DoesNotExist")
                        let networkService: NetworkService
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithUnfulfillableInstantiatedProperty_throwsError() async {
        await assertThrowsError(
            """
            No `@Instantiable`-decorated type or extension found to fulfill `@Instantiated`-decorated property with type `URLSession`
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import Foundation

                    public protocol NetworkService {}

                    @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                    public final class DefaultNetworkService: NetworkService {
                        public init(urlSession: URLSession) {
                            self.urlSession = urlSession
                        }

                        @Instantiated
                        let urlSession: URLSession // URLSession is not `@Instantiable`! This will fail!
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated
                        let networkService: NetworkService
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithUnfulfillableReceivedProperty_throwsError() async {
        await assertThrowsError(
            """
            The following @Received properties were never @Instantiated or @Forwarded:
            `urlSession: URLSession` is not @Instantiated or @Forwarded in chain: RootViewController -> DefaultNetworkService
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import Foundation

                    public protocol NetworkService {}

                    @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                    public final class DefaultNetworkService: NetworkService {
                        public init(urlSession: URLSession) {
                            self.urlSession = urlSession
                        }

                        @Received
                        let urlSession: URLSession // URLSession is not `@Instantiable`! This will fail!
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated
                        let networkService: NetworkService
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithUnfulfillableRenamedReceivedPropertyName_throwsError() async {
        await assertThrowsError(
            """
            The following @Received properties were never @Instantiated or @Forwarded:
            `networkService2: NetworkService` is not @Instantiated or @Forwarded in chain: RootViewController -> DefaultAuthService
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import Foundation

                    public protocol NetworkService {}

                    @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                    public final class DefaultNetworkService: NetworkService {}
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated
                        let networkService: NetworkService

                        @Instantiated
                        let authService: AuthService
                    }
                    """,
                    """
                    public protocol AuthService {
                        func login(username: String, password: String) async -> User
                    }

                    @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                    public final class DefaultAuthService: AuthService {
                        public func login(username: String, password: String) async -> User {
                            User(username: username)
                        }

                        @Received(
                            fulfilledByDependencyNamed: "networkService2",
                            ofType: NetworkService.self
                        )
                        let networking: NetworkService
                    }
                    """
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithUnfulfillableRenamedReceivedPropertyType_throwsError() async {
        await assertThrowsError(
            """
            The following @Received properties were never @Instantiated or @Forwarded:
            `networkService: NetworkService2` is not @Instantiated or @Forwarded in chain: RootViewController -> DefaultAuthService
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import Foundation

                    public protocol NetworkService {}

                    @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                    public final class DefaultNetworkService: NetworkService {}
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated
                        let networkService: NetworkService

                        @Instantiated
                        let authService: AuthService
                    }
                    """,
                    """
                    public protocol AuthService {
                        func login(username: String, password: String) async -> User
                    }

                    @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                    public final class DefaultAuthService: AuthService {
                        public func login(username: String, password: String) async -> User {
                            User(username: username)
                        }

                        @Received(
                            fulfilledByDependencyNamed: "networkService",
                            ofType: NetworkService2.self
                        )
                        let networking: NetworkService
                    }
                    """
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithUnfulfillableReceivedPropertyOnExtendedInstantiatedType_throwsError() async {
        await assertThrowsError(
            """
            The following @Received properties were never @Instantiated or @Forwarded:
            `urlSession: URLSession` is not @Instantiated or @Forwarded in chain: RootViewController -> URLSessionWrapper
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import URLSessionWrapper

                    @Instantiable
                    extension URLSessionWrapper {
                        public func instantiate(urlSession: URLSession) -> URLSessionWrapper {
                            URLSessionWrapper(urlSession)
                        }
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(urlSessionWrapper: URLSessionWrapper) {
                            self.urlSessionWrapper = urlSessionWrapper
                        }

                        @Instantiated
                        let urlSessionWrapper: URLSessionWrapper
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }


    func test_run_onCodeWithNestedInstantiable_throwsError() async {
        await assertThrowsError(
            """
            @Instantiable types must be top-level declarations. Found the following nested @Instantiable types: SplashViewController
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init() {}

                        @Instantiable
                        public final class SplashViewController: UIViewController {
                            public init() {}
                        }
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithMultipleNestedInstantiable_throwsError() async {
        await assertThrowsError(
            """
            @Instantiable types must be top-level declarations. Found the following nested @Instantiable types: AuthenticatedViewController, SplashViewController
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init() {}

                        @Instantiable
                        public final class SplashViewController: UIViewController {
                            public init() {}
                        }

                        @Instantiable
                        public final class AuthenticatedViewController: UIViewController {
                            public init() {}
                        }
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithDuplicateInstantiable_throwsError() async {
        await assertThrowsError(
            """
            @Instantiable-decorated types and extensions must have globally unique type names and fulfill globally unqiue types. Found multiple types or extensions fulfilling `RootViewController`
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init() {}
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init() {}
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithDuplicateInstantiableAndExtendedInstantiable_throwsError() async {
        await assertThrowsError(
            """
            @Instantiable-decorated types and extensions must have globally unique type names and fulfill globally unqiue types. Found multiple types or extensions fulfilling `RootViewController`
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init() {}
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    extension RootViewController {
                        public static instantiate() {
                            RootViewController()
                        }
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithDuplicateExtendedInstantiable_throwsError() async {
        await assertThrowsError(
            """
            @Instantiable-decorated types and extensions must have globally unique type names and fulfill globally unqiue types. Found multiple types or extensions fulfilling `UserDefaults`
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import Foundation

                    @Instantiable
                    extension UserDefaults {
                        public static instantiate() {
                            .standard
                        }
                    }
                    """,
                    """
                    import Foundation

                    @Instantiable
                    extension UserDefaults {
                        public static instantiate(suiteName: String) {
                            UserDefaults(suiteName: suiteName)
                        }
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithDuplicateInstantiableFulfillment_throwsError() async {
        await assertThrowsError(
            """
            @Instantiable-decorated types and extensions must have globally unique type names and fulfill globally unqiue types. Found multiple types or extensions fulfilling `UIViewController`
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import UIKit

                    @Instantiable(fulfillingAdditionalTypes: [UIViewController.self])
                    public final class RootViewController: UIViewController {
                        public init() {}
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable(fulfillingAdditionalTypes: [UIViewController.self])
                    public final class SplashViewController: UIViewController {
                        public init() {}
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }


    func test_run_onCodeWithCircularPropertyDependenciesInSameCombinedScope_throwsError() async {
        await assertThrowsError(
            """
            Dependency cycle detected!
            DefaultNetworkService -> DefaultLoggingService -> DefaultNetworkService
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    import Foundation

                    public protocol NetworkService {}

                    @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                    public final class DefaultNetworkService: NetworkService {
                        public init(loggingService: LoggingService) {
                            self.loggingService = loggingService
                        }

                        @Instantiated
                        let loggingService: LoggingService
                    }
                    """,
                    """
                    import Foundation

                    public protocol LoggingService {}

                    @Instantiable(fulfillingAdditionalTypes: [LoggingService.self])
                    public final class DefaultLoggingService: LoggingService {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated
                        let networkService: NetworkService
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated
                        let networkService: NetworkService
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithCircularPropertyDependenciesInDifferentCombinedScopes_throwsError() async {
        await assertThrowsError(
            """
            Dependency cycle detected!
            UserManager -> ProfileViewController -> UserManager
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                    """
                    @Instantiable
                    public final class UserManager {
                        @Instantiated
                        let profileViewControllerBuilder: Instantiator<ProfileViewController>

                        var user: User?
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class ProfileViewController: UIViewController {
                        @Instantiated
                        let userManager: UserManager
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        @Instantiated
                        let userManager: UserManager
                    }
                    """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }
    
    func test_run_onCodeWithForwardingInstantiatorSecondGeneric_hasNoForwardedProperty_throwsError() async throws {
        await assertThrowsError(
            """
            Property `noteViewBuilder: ForwardingInstantiator<String, NoteView>` on RootView has no @Forwarded property. Property should instead be of type `Instantiator<NoteView>`.
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                """
                import SwiftUI

                @Instantiable
                public struct RootView: View {
                    public var view: some View {
                        noteViewBuilder.instantiate("my note")
                    }

                    @Instantiated
                    let noteViewBuilder: ForwardingInstantiator<String, NoteView>
                }
                """,
                """
                import SwiftUI

                @Instantiable
                public struct NoteView: View {
                    public var view: some View {
                        TextField(note)
                    }

                    @State
                    var note: String = ""
                }
                """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithIncorrectForwardingInstantiatorFirstGeneric_whenInstantiableHasSingleForwardedProperty_throwsError() async throws {
        await assertThrowsError(
            """
            Property `loggedInViewControllerBuilder: ForwardingInstantiator<String, UIViewController>` on LoggedInViewController incorrectly configured. Property should instead be of type `ForwardingInstantiator<LoggedInViewController.ForwardedArguments, UIViewController>`.
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<String, UIViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated(fulfilledByType: "LoggedInViewController")
                    let loggedInViewControllerBuilder: ForwardingInstantiator<String, UIViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(username)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    public init(user: User, networkService: NetworkService) {
                        self.user = user
                        self.networkService = networkService
                    }

                    @Forwarded
                    private let user: User

                    @Received
                    let networkService: NetworkService
                }
                """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithIncorrectForwardingInstantiatorFirstGeneric_whenInstantiableHasMultipleForwardedProperty_throwsError() async throws {
        await assertThrowsError(
            """
            Property `loggedInViewControllerBuilder: ForwardingInstantiator<String, UIViewController>` on LoggedInViewController incorrectly configured. Property should instead be of type `ForwardingInstantiator<LoggedInViewController.ForwardedArguments, UIViewController>`.
            """
        ) {
            try await executeSystemUnderTest(
                swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Received
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<String, UIViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated(fulfilledByType: "LoggedInViewController")
                    let loggedInViewControllerBuilder: ForwardingInstantiator<String, UIViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(username)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    @Forwarded
                    private let user: User

                    @Forwarded
                    private let userManager: UserManager

                    @Received
                    let networkService: NetworkService
                }
                """,
                ],
                buildDependencyTreeOutput: true
            )
        }
    }

    private func assertThrowsError<ReturnType>(
        _ errorDescription: String,
        line: UInt = #line,
        block: () async throws -> ReturnType
    ) async {
        do {
            _ = try await block()
            XCTFail("Did not throw error!", line: line)
        } catch {
            XCTAssertEqual("\(error)", errorDescription, line: line)
        }
    }

    private func executeSystemUnderTest(
        swiftFileContent: [String],
        dependentModuleOutputPaths: [String] = [],
        buildDependencyTreeOutput: Bool
    ) async throws -> TestOutput {
        let swiftFileCSV = URL.temporaryFile
        let swiftFiles = try swiftFileContent
            .map {
                let location = URL.temporaryFile
                try $0.write(to: location, atomically: true, encoding: .utf8)
                return location
            }
        try swiftFiles
            .map { $0.relativePath }
            .joined(separator: ",")
            .write(to: swiftFileCSV, atomically: true, encoding: .utf8)

        let moduleInfoOutput = URL.temporaryFile
        let dependencyTreeOutput = URL.temporaryFile
        var tool = SafeDITool()
        tool.swiftSourcesFilePath = swiftFileCSV.relativePath
        tool.additionalImportedModules = []
        tool.moduleInfoOutput = moduleInfoOutput.relativePath
        tool.moduleInfoPaths = dependentModuleOutputPaths
        tool.dependencyTreeOutput = buildDependencyTreeOutput ? dependencyTreeOutput.relativePath : nil
        try await tool.run()
        
        filesToDelete.append(swiftFileCSV)
        filesToDelete += swiftFiles
        filesToDelete.append(moduleInfoOutput)
        if buildDependencyTreeOutput {
            filesToDelete.append(dependencyTreeOutput)
        }

        return TestOutput(
            moduleInfo: try JSONDecoder().decode(SafeDITool.ModuleInfo.self, from: Data(contentsOf: moduleInfoOutput)),
            moduleInfoOutputPath: moduleInfoOutput.relativePath,
            dependencyTree: buildDependencyTreeOutput ? String(data: try Data(contentsOf: dependencyTreeOutput), encoding: .utf8) : nil,
            dependencyTreeOutputPath: buildDependencyTreeOutput ? dependencyTreeOutput.relativePath : nil
        )
    }

    private struct TestOutput {
        let moduleInfo: SafeDITool.ModuleInfo
        let moduleInfoOutputPath: String
        let dependencyTree: String?
        let dependencyTreeOutputPath: String?
    }

    private var filesToDelete = [URL]()
}

extension URL {
    fileprivate static var temporaryFile: URL {
#if os(Linux)
        FileManager.default.temporaryDirectory.appendingPathComponent(UUID().uuidString)
#else
        if #available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *) {
            URL.temporaryDirectory.appending(path: UUID().uuidString)
        } else {
            FileManager.default.temporaryDirectory.appendingPathComponent(UUID().uuidString)
        }
#endif
    }
}
