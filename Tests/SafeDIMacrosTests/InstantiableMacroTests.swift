// Distributed under the MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import MacroTesting
import SwiftSyntaxMacros
import SwiftSyntaxMacrosTestSupport
import XCTest

import SafeDICore

#if canImport(SafeDIMacros)
@testable import SafeDIMacros

final class InstantiableMacroTests: XCTestCase {
    let testMacros: [String: Macro.Type] = [
        InstantiableVisitor.macroName: InstantiableMacro.self,
        InstantiableVisitor.extendedMacroName: InstantiableMacro.self,
        Dependency.Source.instantiatedRawValue: InjectableMacro.self,
        Dependency.Source.receivedRawValue: InjectableMacro.self,
        Dependency.Source.forwardedRawValue: InjectableMacro.self,
    ]

    // MARK: XCTestCase

    override func invokeTest() {
        func executeTest() {
            withMacroTesting(macros: testMacros) {
                super.invokeTest()
            }
        }
#if os(Linux) // Linux does not support multiple invokations of the same test.
        executeTest()
#else
        // Stop test execution on the first failure so we don't get repeated failures per repeated test run.
        continueAfterFailure = false
        // Run each test five times to ensure ordering is consistent.
        for _ in 0..<5 {
            executeTest()
        }
#endif
    }

    // MARK: Generation tests

    func test_declaration_generatesRequiredInitializerWithoutAnyDependenciesOnStruct() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
            }
            """
        } expansion: {
            """
            public struct ExampleService {

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init() {
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithoutAnyDependenciesOnClass() {
        assertMacro {
            """
            @Instantiable
            public class ExampleService {
            }
            """
        } expansion: {
            """
            public class ExampleService {

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init() {
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithoutAnyDependenciesOnActor() {
        assertMacro {
            """
            @Instantiable
            public actor ExampleService {
            }
            """
        } expansion: {
            """
            public actor ExampleService {

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                public init() {
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_doesNotGenerateRequiredInitializerWithoutDependenciesIfItAlreadyExists() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                public init() {}
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                public init() {}
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithoutAnyDependenciesAndInitializedVariable() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                var initializedVariable = "test"
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                var initializedVariable = "test"

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init() {
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithoutAnyDependenciesAndVariableWithAccessor() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                var initializedVariable { "test" }
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                var initializedVariable { "test" }

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init() {
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_doesNotGenerateRequiredInitializerWithDependenciesIfItAlreadyExists() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Instantiated
                let instantiatedA: InstantiatedA

                public init(instantiatedA: InstantiatedA) {
                    self.instantiatedA = instantiatedA
                }
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                let instantiatedA: InstantiatedA

                public init(instantiatedA: InstantiatedA) {
                    self.instantiatedA = instantiatedA
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_doesNotGenerateRequiredInitializerIfItAlreadyExistsWithClosureDependency() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                public init(closure: @escaping () -> Void) {
                    self.closure = closure
                }
                @Forwarded
                let closure: () -> Void
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                public init(closure: @escaping () -> Void) {
                    self.closure = closure
                }
                let closure: () -> Void

                public typealias ForwardedProperties = () -> Void
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_doesNotGenerateRequiredInitializerIfItAlreadyExistsWithSendableClosureDependency() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                public init(closure: @escaping @Sendable () -> Void) {
                    self.closure = closure
                }
                @Forwarded
                let closure: @Sendable () -> Void
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                public init(closure: @escaping @Sendable () -> Void) {
                    self.closure = closure
                }
                let closure: @Sendable () -> Void

                public typealias ForwardedProperties = @Sendable () -> Void
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_doesNotGenerateRequiredInitializerIfItAlreadyExistsWithTupleWrappedClosureDependency() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                public init(closure: @escaping @Sendable () -> Void) {
                    self.closure = closure
                }
                @Forwarded
                let closure: (() -> Void)
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                public init(closure: @escaping @Sendable () -> Void) {
                    self.closure = closure
                }
                let closure: (() -> Void)

                public typealias ForwardedProperties = () -> Void
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_doesNotGenerateRequiredInitializerIfItAlreadyExistsWithDefaultArguments() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                let nonInjectedProperty: Int

                public init(nonInjectedProperty: Int = 5) {
                    self.nonInjectedProperty = nonInjectedProperty
                }
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                let nonInjectedProperty: Int

                public init(nonInjectedProperty: Int = 5) {
                    self.nonInjectedProperty = nonInjectedProperty
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_doesNotGenerateRequiredInitializerWithDependenciesSatisfyingInitializerIfItAlreadyExistsWithDefaultArguments() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Instantiated
                let instantiatedA: InstantiatedA

                let nonInjectedProperty: Int

                public init(instantiatedA: InstantiatedA, nonInjectedProperty: Int = 5) {
                    self.instantiatedA = instantiatedA
                    self.nonInjectedProperty = nonInjectedProperty
                }
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                let instantiatedA: InstantiatedA

                let nonInjectedProperty: Int

                public init(instantiatedA: InstantiatedA, nonInjectedProperty: Int = 5) {
                    self.instantiatedA = instantiatedA
                    self.nonInjectedProperty = nonInjectedProperty
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithDependencies() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Instantiated
                let instantiatedA: InstantiatedA
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                let instantiatedA: InstantiatedA

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(instantiatedA: InstantiatedA) {
                    self.instantiatedA = instantiatedA
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithDependenciesWhenNestedTypesHaveUninitializedProperties() {
        assertMacro {
            """
            @Instantiable
            public final class ExampleService {
                @Instantiated
                let instantiatedA: InstantiatedA

                public enum NestedEnum {
                    // This won't compile but we should still generate an initializer.
                    let uninitializedProperty: Any
                }
                public struct NestedStruct {
                    let uninitializedProperty: Any
                }
                public actor NestedActor {
                    let uninitializedProperty: Any
                }
                public final class NestedClass {
                    let uninitializedProperty: Any
                }
            }
            """
        } expansion: {
            """
            public final class ExampleService {
                let instantiatedA: InstantiatedA

                public enum NestedEnum {
                    // This won't compile but we should still generate an initializer.
                    let uninitializedProperty: Any
                }
                public struct NestedStruct {
                    let uninitializedProperty: Any
                }
                public actor NestedActor {
                    let uninitializedProperty: Any
                }
                public final class NestedClass {
                    let uninitializedProperty: Any
                }

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(instantiatedA: InstantiatedA) {
                    self.instantiatedA = instantiatedA
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithDependenciesWhenPropertyHasInitializerAndNoType() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Instantiated
                let instantiatedA: InstantiatedA

                let initializedProperty = 5
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                let instantiatedA: InstantiatedA

                let initializedProperty = 5

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(instantiatedA: InstantiatedA) {
                    self.instantiatedA = instantiatedA
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithDependenciesWhenPropertyHasInitializerAndType() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Instantiated
                let instantiatedA: InstantiatedA

                let initializedProperty: Int = 5
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                let instantiatedA: InstantiatedA

                let initializedProperty: Int = 5

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(instantiatedA: InstantiatedA) {
                    self.instantiatedA = instantiatedA
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithDependenciesWhenPropertyIsOptional() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Instantiated
                let instantiatedA: InstantiatedA

                var optionalProperty: Int?
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                let instantiatedA: InstantiatedA

                var optionalProperty: Int?

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(instantiatedA: InstantiatedA) {
                    self.instantiatedA = instantiatedA
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithDependenciesWhenPropertyIsStatic() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Instantiated
                let instantiatedA: InstantiatedA

                // This won't compile but we should still generate an initializer.
                public static let staticProperty: Int
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                let instantiatedA: InstantiatedA

                // This won't compile but we should still generate an initializer.
                public static let staticProperty: Int

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(instantiatedA: InstantiatedA) {
                    self.instantiatedA = instantiatedA
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWhenDependencyMissingFromInit() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                public init(forwardedA: ForwardedA, receivedA: ReceivedA) {
                    self.forwardedA = forwardedA
                    self.receivedA = receivedA
                    receivedB = ReceivedB()
                }

                @Forwarded
                let forwardedA: ForwardedA
                @Received
                let receivedA: ReceivedA
                @Received
                let receivedB: ReceivedB
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                public init(forwardedA: ForwardedA, receivedA: ReceivedA) {
                    self.forwardedA = forwardedA
                    self.receivedA = receivedA
                    receivedB = ReceivedB()
                }
                let forwardedA: ForwardedA
                let receivedA: ReceivedA
                let receivedB: ReceivedB

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(forwardedA: ForwardedA, receivedA: ReceivedA, receivedB: ReceivedB) {
                    self.forwardedA = forwardedA
                    self.receivedA = receivedA
                    self.receivedB = receivedB
                }

                public typealias ForwardedProperties = ForwardedA
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesForwardedPropertiesWhenThereAreMultipleForwardedProperties() {
        assertMacro {
            """
            @Instantiable
            public final class UserService {
                @Forwarded
                let userID: String

                @Forwarded
                let userName: String
            }
            """
        } expansion: {
            """
            public final class UserService {
                let userID: String
                let userName: String

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(userID: String, userName: String) {
                    self.userID = userID
                    self.userName = userName
                }

                public typealias ForwardedProperties = (userID: String, userName: String)
            }

            extension UserService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithClosureDependency() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Forwarded
                let closure: () -> Void
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                let closure: () -> Void

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(closure: @escaping () -> Void) {
                    self.closure = closure
                }

                public typealias ForwardedProperties = () -> Void
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWithSendableClosureDependency() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Forwarded
                let closure: @Sendable () -> Void
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                let closure: @Sendable () -> Void

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(closure: @escaping @Sendable () -> Void) {
                    self.closure = closure
                }

                public typealias ForwardedProperties = @Sendable () -> Void
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_generatesRequiredInitializerWhenInstantiatorDependencyMissingFromInit() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Instantiated
                private let instantiatableAInstantiator: Instantiator<ReceivedA>
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                private let instantiatableAInstantiator: Instantiator<ReceivedA>

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init(instantiatableAInstantiator: Instantiator<ReceivedA>) {
                    self.instantiatableAInstantiator = instantiatableAInstantiator
                }
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    // MARK: Error tests

    func test_declaration_throwsErrorWhenOnProtocol() {
        assertMacro {
            """
            @Instantiable
            public protocol ExampleService {}
            """
        } diagnostics: {
            """
            @Instantiable
            ┬────────────
            ╰─ 🛑 @Instantiable must decorate an extension on a type or a class, struct, or actor declaration
            public protocol ExampleService {}
            """
        }
    }

    func test_declaration_throwsErrorWhenOnEnum() {
        assertMacro {
            """
            @Instantiable
            public enum ExampleService {}
            """
        } diagnostics: {
            """
            @Instantiable
            ┬────────────
            ╰─ 🛑 @Instantiable must decorate an extension on a type or a class, struct, or actor declaration
            public enum ExampleService {}
            """
        }
    }

    func test_declaration_throwsErrorWhenFulfillingAdditionalTypesIsAPropertyReference() {
        assertMacro {
            """
            let fulfillingAdditionalTypes: [Any.Type] = [AnyObject.self]
            @Instantiable(fulfillingAdditionalTypes: fulfillingAdditionalTypes)
            public final class ExampleService {}
            """
        } diagnostics: {
            """
            let fulfillingAdditionalTypes: [Any.Type] = [AnyObject.self]
            @Instantiable(fulfillingAdditionalTypes: fulfillingAdditionalTypes)
            ┬──────────────────────────────────────────────────────────────────
            ╰─ 🛑 The argument `fulfillingAdditionalTypes` must be an inlined array
            public final class ExampleService {}
            """
        }
    }

    func test_declaration_throwsErrorWhenFulfillingAdditionalTypesIsAClosure() {
        assertMacro {
            """
            @Instantiable(fulfillingAdditionalTypes: { [AnyObject.self] }())
            public final class ExampleService {}
            """
        } diagnostics: {
            """
            @Instantiable(fulfillingAdditionalTypes: { [AnyObject.self] }())
            ┬───────────────────────────────────────────────────────────────
            ╰─ 🛑 The argument `fulfillingAdditionalTypes` must be an inlined array
            public final class ExampleService {}
            """
        }
    }

    func test_extension_throwsErrorWhenFulfillingAdditionalTypesIsAPropertyReference() {
        assertMacro {
            """
            let fulfillingAdditionalTypes: [Any.Type] = [AnyObject.self]
            @InstantiableExtension(fulfillingAdditionalTypes: fulfillingAdditionalTypes)
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            let fulfillingAdditionalTypes: [Any.Type] = [AnyObject.self]
            @InstantiableExtension(fulfillingAdditionalTypes: fulfillingAdditionalTypes)
            ┬───────────────────────────────────────────────────────────────────────────
            ╰─ 🛑 The argument `fulfillingAdditionalTypes` must be an inlined array
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_throwsErrorWhenFulfillingAdditionalTypesIsAClosure() {
        assertMacro {
            """
            @InstantiableExtension(fulfillingAdditionalTypes: { [AnyObject.self] }())
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension(fulfillingAdditionalTypes: { [AnyObject.self] }())
            ┬────────────────────────────────────────────────────────────────────────
            ╰─ 🛑 The argument `fulfillingAdditionalTypes` must be an inlined array
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_throwsErrorWhenMoreThanOneInstantiateMethod() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
                public static func instantiate(user: User) -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            ┬─────────────────────
            ╰─ 🛑 @InstantiableExtension-decorated extension must have a single `instantiate()` method
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
                public static func instantiate(user: User) -> ExampleService { fatalError() }
            }
            """
        }
    }

    // MARK: FixIt tests

    func test_declaration_fixit_addsFixitWhenMultipleInjectableMacrosOnTopOfSingleProperty() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Received
                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } diagnostics: {
            """
            @Instantiable
            public struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Received
                ╰─ 🛑 Dependency can have at most one of @Instantiated, @Received, or @Forwarded attached macro
                   ✏️ Remove excessive attached macros
                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } fixes: {
            """
            @Instantiable
            public struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Received
            }
            """ // Fixes expansion is incorrect – we delete the second macro but not the property.
        }
    }

    func test_declaration_fixit_addsFixitWhenInjectableParameterHasInitializer() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA = .init()
            }
            """
        } diagnostics: {
            """
            @Instantiable
            public struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                ╰─ 🛑 Dependency must not have hand-written initializer
                   ✏️ Remove initializer
                let receivedA: ReceivedA = .init()
            }
            """
        } fixes: {
            """
            @Instantiable
            public struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA 
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }
                let receivedA: ReceivedA 
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitWhenInjectableActorIsNotPublicOrOpen() {
        assertMacro {
            """
            @Instantiable
            actor ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } diagnostics: {
            """
            @Instantiable
            ╰─ 🛑 @Instantiable-decorated type must be `public` or `open`
               ✏️ Add `public` modifier
            actor ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } fixes: {
            """
            @Instantiable
            public actor ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } expansion: {
            """
            public actor ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }
                let receivedA: ReceivedA
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitWhenInjectableClassIsNotPublicOrOpen() {
        assertMacro {
            """
            @Instantiable
            class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } diagnostics: {
            """
            @Instantiable
            ╰─ 🛑 @Instantiable-decorated type must be `public` or `open`
               ✏️ Add `public` modifier
            class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } fixes: {
            """
            @Instantiable
            public class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } expansion: {
            """
            public class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }
                let receivedA: ReceivedA
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitWhenInjectableFinalClassIsNotPublicOrOpen() {
        assertMacro {
            """
            @Instantiable
            final class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } diagnostics: {
            """
            @Instantiable
            ╰─ 🛑 @Instantiable-decorated type must be `public` or `open`
               ✏️ Add `public` modifier
            final class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } fixes: {
            """
            @Instantiable
            public final class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } expansion: {
            """
            public final class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }
                let receivedA: ReceivedA
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitWhenInjectableClassIsInternal() {
        assertMacro {
            """
            @Instantiable
            internal class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } diagnostics: {
            """
            @Instantiable
            ╰─ 🛑 @Instantiable-decorated type must be `public` or `open`
               ✏️ Add `public` modifier
            internal class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } fixes: {
            """
            @Instantiable
            public class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } expansion: {
            """
            public class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }
                let receivedA: ReceivedA
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitWhenInjectableClassIsFileprivate() {
        assertMacro {
            """
            @Instantiable
            fileprivate class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } diagnostics: {
            """
            @Instantiable
            ╰─ 🛑 @Instantiable-decorated type must be `public` or `open`
               ✏️ Add `public` modifier
            fileprivate class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } fixes: {
            """
            @Instantiable
            public class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } expansion: {
            """
            public class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }
                let receivedA: ReceivedA
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitWhenInjectableClassIsPrivate() {
        assertMacro {
            """
            @Instantiable
            private class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } diagnostics: {
            """
            @Instantiable
            ╰─ 🛑 @Instantiable-decorated type must be `public` or `open`
               ✏️ Add `public` modifier
            private class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } fixes: {
            """
            @Instantiable
            public class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } expansion: {
            """
            public class ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }
                let receivedA: ReceivedA
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitWhenInjectableStructIsNotPublicOrOpen() {
        assertMacro {
            """
            @Instantiable
            struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } diagnostics: {
            """
            @Instantiable
            ╰─ 🛑 @Instantiable-decorated type must be `public` or `open`
               ✏️ Add `public` modifier
            struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } fixes: {
            """
            @Instantiable
            public struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }

                @Instantiated
                let receivedA: ReceivedA
            }
            """
        } expansion: {
            """
            public struct ExampleService {
                public init(receivedA: ReceivedA) {
                    self.receivedA = receivedA
                }
                let receivedA: ReceivedA
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitMissingRequiredInitializerWhenPropertyIsMissingInitializerAndThereAreNoDependencies() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                let uninitializedProperty: Int
            }
            """
        } diagnostics: {
            """
            @Instantiable
            public struct ExampleService {
                                         ╰─ 🛑 @Instantiable-decorated type with no @Instantiated, @Received, or @Forwarded-decorated properties must have a `public` or `open` initializer that either takes no parameters or has a default value for each parameter.
                                            ✏️ Add required initializer
                let uninitializedProperty: Int
            }
            """
        } fixes: {
            """
            @Instantiable
            public struct ExampleService {
            nonisolated public init() {
            // If the following properties were decorated with the @Instantiated, @Received, or @Forwarded macros, had default values, or were written as computed properties, this initializer could have been auto-generated by the @Instantiable macro.
            uninitializedProperty = <#T##assign_uninitializedProperty#>
            }

                let uninitializedProperty: Int
            }
            """
        } expansion: {
            """
            public struct ExampleService {
            nonisolated public init() {
            // If the following properties were decorated with the @Instantiated, @Received, or @Forwarded macros, had default values, or were written as computed properties, this initializer could have been auto-generated by the @Instantiable macro.
            uninitializedProperty = <#T##assign_uninitializedProperty#>
            }

                let uninitializedProperty: Int
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitMissingRequiredInitializerWhenPropertyIsMissingInitializer() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Instantiated
                let receivedA: ReceivedA

                let uninitializedProperty: Int
            }
            """
        } diagnostics: {
            """
            @Instantiable
            public struct ExampleService {
                                         ╰─ 🛑 @Instantiable-decorated type must have a `public` or `open` initializer with a parameter for each @Instantiated, @Received, or @Forwarded-decorated property. Parameters in this initializer that do not correspond to a decorated property must have default values.
                                            ✏️ Add required initializer
                @Instantiated
                let receivedA: ReceivedA

                let uninitializedProperty: Int
            }
            """
        } fixes: {
            """
            @Instantiable
            public struct ExampleService {
            nonisolated public init(receivedA: ReceivedA) {
            self.receivedA = receivedA
            // If the following properties were decorated with the @Instantiated, @Received, or @Forwarded macros, had default values, or were written as computed properties, this initializer could have been auto-generated by the @Instantiable macro.
            uninitializedProperty = <#T##assign_uninitializedProperty#>
            }

                @Instantiated
                let receivedA: ReceivedA

                let uninitializedProperty: Int
            }
            """
        } expansion: {
            """
            public struct ExampleService {
            nonisolated public init(receivedA: ReceivedA) {
            self.receivedA = receivedA
            // If the following properties were decorated with the @Instantiated, @Received, or @Forwarded macros, had default values, or were written as computed properties, this initializer could have been auto-generated by the @Instantiable macro.
            uninitializedProperty = <#T##assign_uninitializedProperty#>
            }
                let receivedA: ReceivedA

                let uninitializedProperty: Int
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitMissingRequiredInitializerWhenMultiplePropertiesAreMissingInitializer() {
        assertMacro {
            """
            @Instantiable
            public struct ExampleService {
                @Instantiated
                let receivedA: ReceivedA

                var uninitializedProperty1: Int
                let uninitializedProperty2: Int, uninitializedProperty3: Int, initializedProperty = "init"
                let (uninitializedProperty4, uninitializedProperty5): (Int, Int)
            }
            """
        } diagnostics: {
            """
            @Instantiable
            public struct ExampleService {
                                         ╰─ 🛑 @Instantiable-decorated type must have a `public` or `open` initializer with a parameter for each @Instantiated, @Received, or @Forwarded-decorated property. Parameters in this initializer that do not correspond to a decorated property must have default values.
                                            ✏️ Add required initializer
                @Instantiated
                let receivedA: ReceivedA

                var uninitializedProperty1: Int
                let uninitializedProperty2: Int, uninitializedProperty3: Int, initializedProperty = "init"
                let (uninitializedProperty4, uninitializedProperty5): (Int, Int)
            }
            """
        } fixes: {
            """
            @Instantiable
            public struct ExampleService {
            nonisolated public init(receivedA: ReceivedA) {
            self.receivedA = receivedA
            // If the following properties were decorated with the @Instantiated, @Received, or @Forwarded macros, had default values, or were written as computed properties, this initializer could have been auto-generated by the @Instantiable macro.
            uninitializedProperty1 = <#T##assign_uninitializedProperty1#>
            uninitializedProperty2 = <#T##assign_uninitializedProperty2#>
            uninitializedProperty3 = <#T##assign_uninitializedProperty3#>
            (uninitializedProperty4, uninitializedProperty5) = <#T##assign_(uninitializedProperty4, uninitializedProperty5)#>
            }

                @Instantiated
                let receivedA: ReceivedA

                var uninitializedProperty1: Int
                let uninitializedProperty2: Int, uninitializedProperty3: Int, initializedProperty = "init"
                let (uninitializedProperty4, uninitializedProperty5): (Int, Int)
            }
            """
        } expansion: {
            """
            public struct ExampleService {
            nonisolated public init(receivedA: ReceivedA) {
            self.receivedA = receivedA
            // If the following properties were decorated with the @Instantiated, @Received, or @Forwarded macros, had default values, or were written as computed properties, this initializer could have been auto-generated by the @Instantiable macro.
            uninitializedProperty1 = <#T##assign_uninitializedProperty1#>
            uninitializedProperty2 = <#T##assign_uninitializedProperty2#>
            uninitializedProperty3 = <#T##assign_uninitializedProperty3#>
            (uninitializedProperty4, uninitializedProperty5) = <#T##assign_(uninitializedProperty4, uninitializedProperty5)#>
            }
                let receivedA: ReceivedA

                var uninitializedProperty1: Int
                let uninitializedProperty2: Int, uninitializedProperty3: Int, initializedProperty = "init"
                let (uninitializedProperty4, uninitializedProperty5): (Int, Int)
            }

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_declaration_fixit_addsFixitIncorrectMacroWhenMacroOnDeclarationIsInstantiableExtension() {
        assertMacro {
            """
            @InstantiableExtension
            public struct ExampleService {}
            """
        } diagnostics: {
            """
            @InstantiableExtension
            ┬─────────────────────
            ╰─ 🛑 @InstantiableExtension-decoration is reserved for extensions
               ✏️ Replace macro with Instantiable
            public struct ExampleService {}
            """
        } fixes: {
            """
            @Instantiable
            public struct ExampleService {}
            """
        } expansion: {
            """
            public struct ExampleService {

                // A generated initializer that has one argument per SafeDI-injected property.
                // Because this initializer is generated by a Swift Macro, it can not be used by other Swift Macros.
                // As a result, this initializer can not be used within a #Preview macro closure.
                // This initializer is only generated because you have not written this macro yourself.
                // Copy/pasting this generated initializer into your code will enable this initializer to be used within other Swift Macros.
                nonisolated public init() {
                }}

            extension ExampleService: Instantiable {
            }
            """
        }
    }

    func test_extension_fixit_addsFixitIncorrectMacroWhenMacroOnDeclarationIsInstantiable() {
        assertMacro {
            """
            @Instantiable
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @Instantiable
            ┬────────────
            ╰─ 🛑 @Instantiable-decoration is reserved for type declarations
               ✏️ Replace macro with InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenNoConformancesDeclared() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            ┬─────────────────────
            ╰─ 🛑 @InstantiableExtension-decorated extension must declare conformance to `Instantiable`
               ✏️ Declare conformance to `Instantiable`
            extension ExampleService {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiableConformanceMissing() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: CustomStringConvertible {
                public static func instantiate() -> ExampleService { fatalError() }

                public var description: String { "ExampleService" }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            ┬─────────────────────
            ╰─ 🛑 @InstantiableExtension-decorated extension must declare conformance to `Instantiable`
               ✏️ Declare conformance to `Instantiable`
            extension ExampleService: CustomStringConvertible {
                public static func instantiate() -> ExampleService { fatalError() }

                public var description: String { "ExampleService" }
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable, CustomStringConvertible {
                public static func instantiate() -> ExampleService { fatalError() }

                public var description: String { "ExampleService" }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable, CustomStringConvertible {
                public static func instantiate() -> ExampleService { fatalError() }

                public var description: String { "ExampleService" }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiateMethodMissing() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                                                    ╰─ 🛑 @InstantiableExtension-decorated extension of ExampleService must have a `public static func instantiate() -> ExampleService` method
                                                       ✏️ Add `public static func instantiate() -> ExampleService` method
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
            public static func instantiate() -> ExampleService
            {}


            public static func instantiate() -> ExampleService
            {}
            """ // This is correct in Xcode: we only write the `instantiate()` method once.
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiateMethodIsNotPublic() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                static func instantiate() -> ExampleService { fatalError() }
                ┬───────────────────────────────────────────────────────────
                ╰─ 🛑 @InstantiableExtension-decorated extension must have an `instantiate()` method that is both `public` and `static`
                   ✏️ Set `public static` modifiers
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiateMethodIsNotStatic() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public func instantiate() -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public func instantiate() -> ExampleService { fatalError() }
                ┬───────────────────────────────────────────────────────────
                ╰─ 🛑 @InstantiableExtension-decorated extension must have an `instantiate()` method that is both `public` and `static`
                   ✏️ Set `public static` modifiers
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiateMethodIsNotStaticOrPublic() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                func instantiate() -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                func instantiate() -> ExampleService { fatalError() }
                ┬────────────────────────────────────────────────────
                ╰─ 🛑 @InstantiableExtension-decorated extension must have an `instantiate()` method that is both `public` and `static`
                   ✏️ Set `public static` modifiers
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiateMethodReturnsIncorrectType() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> OtherExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> OtherExampleService { fatalError() }
                ┬───────────────────────────────────────────────────────────────────────
                ╰─ 🛑 @InstantiableExtension-decorated extension’s `instantiate()` method must return the same type as the extended type
                   ✏️ Make `instantiate()`’s return type the same as the extended type
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiateMethodIsAsync() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() async -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() async -> ExampleService { fatalError() }
                ┬────────────────────────────────────────────────────────────────────────
                ╰─ 🛑 @InstantiableExtension-decorated extension’s `instantiate()` method must not throw or be async
                   ✏️ Remove effect specifiers
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiateMethodThrows() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() throws -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() throws -> ExampleService { fatalError() }
                ┬─────────────────────────────────────────────────────────────────────────
                ╰─ 🛑 @InstantiableExtension-decorated extension’s `instantiate()` method must not throw or be async
                   ✏️ Remove effect specifiers
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiateMethodIsAsyncAndThrows() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() async throws -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() async throws -> ExampleService { fatalError() }
                ┬───────────────────────────────────────────────────────────────────────────────
                ╰─ 🛑 @InstantiableExtension-decorated extension’s `instantiate()` method must not throw or be async
                   ✏️ Remove effect specifiers
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiateMethodHasGenericParameter() {
        assertMacro {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate<T>() -> ExampleService { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate<T>() -> ExampleService { fatalError() }
                ┬─────────────────────────────────────────────────────────────────────
                ╰─ 🛑 @InstantiableExtension-decorated extension’s `instantiate()` method must not have a generic parameter
                   ✏️ Remove generic parameter
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        } expansion: {
            """
            extension ExampleService: Instantiable {
                public static func instantiate() -> ExampleService { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenInstantiateMethodHasGenericWhereClause() {
        assertMacro {
            """
            @InstantiableExtension
            extension Array: Instantiable {
                public static func instantiate() -> Array where Element == String { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            extension Array: Instantiable {
                public static func instantiate() -> Array where Element == String { fatalError() }
                ┬─────────────────────────────────────────────────────────────────────────────────
                ╰─ 🛑 @InstantiableExtension-decorated extension must not have a generic `where` clause
                   ✏️ Remove generic `where` clause
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension Array: Instantiable {
                public static func instantiate() -> Array { fatalError() }
            }
            """
        } expansion: {
            """
            extension Array: Instantiable {
                public static func instantiate() -> Array { fatalError() }
            }
            """
        }
    }

    func test_extension_fixit_addsFixitWhenExtensionHasGenericWhereClause() {
        assertMacro {
            """
            @InstantiableExtension
            extension Array: Instantiable where Element == String {
                public static func instantiate() -> Array { fatalError() }
            }
            """
        } diagnostics: {
            """
            @InstantiableExtension
            ┬─────────────────────
            ╰─ 🛑 @InstantiableExtension-decorated extension must not have a generic `where` clause
               ✏️ Remove generic `where` clause
            extension Array: Instantiable where Element == String {
                public static func instantiate() -> Array { fatalError() }
            }
            """
        } fixes: {
            """
            @InstantiableExtension
            extension Array: Instantiable {
                public static func instantiate() -> Array { fatalError() }
            }
            """
        } expansion: {
            """
            extension Array: Instantiable {
                public static func instantiate() -> Array { fatalError() }
            }
            """
        }
    }
}
#endif
